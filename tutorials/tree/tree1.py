## \file
## \ingroup tutorial_tree
## \notebook -nodraw
##
##
## This example is a simple variant of hsimple.py but using a TTree instead
## of a TNtuple. It shows:
##   - How to fill a Tree with a few simple variables.
##   - How to read this Tree.
##   - How to browse and analyze the Tree via the TBrowser and TTreeViewer.
##
##
## This example can be run as:
## ~~~
## IPython [1]: %run tree1.py
## ~~~
##
##
## \macro_code
##
## \author Rene Brun
## \translator P. P.


import ROOT
import ctypes
from array import array

#
# Pythonic style to import many 
# classes from a module. In a
# figurative sense, the python grows
# as the number of classes grows.
# Easy to read and edit.
from ROOT import (
                   TBrowser,
                   TFile,
                   TH2,
                   TH1F,
                   TH2F,
                   TROOT,
                   TRandom,
                   TTree,
                   )

# standard library
from ROOT import std
from ROOT.std import (
                       make_shared,
                       unique_ptr,
                       )

# classes
from ROOT import (
                   TCanvas,
                   TH1F,
                   TGraph,
                   TLatex,
)

# maths
from ROOT import (
                   sin,
                   cos,
                   sqrt,
)

# types
from ROOT import (
                   Double_t,
                   Bool_t,
                   Float_t,
                   Int_t,
                   nullptr,
                   )
#
from ctypes import (
                     c_double,
                     c_float,
                     c_int,
                     )


# utils
def to_c( ls ):
   return (c_double * len(ls) )( * ls )
def printf(string, *args):
   print( string % args, end="")
def sprintf(buffer, string, *args):
   buffer = string % args 
   return buffer

# constants
from ROOT import (
                   kBlue,
                   kRed,
                   kGreen,
                   )

# globals
from ROOT import (
                   gStyle,
                   gPad,
                   gRandom,
                   gBenchmark,
                   gROOT,
                   )




# void
def tree1w() :

   """
   Create a Tree file in the tree1.root file.

   """
   
   #
   # Create the file, the Tree and a few branches.
   global f, t1
   f  = TFile("tree1.root", "recreate")
   t1 = TTree("t1", "a simple Tree with simple variables")
   

   # Setting-up branch.
   px, py, pz = ( c_float() for _ in range( 3 ) )  # Float_t *
   random     = c_double()                         # Double_t *
   ev         = c_int()                            # Int_t *
   #
   t1.Branch("px", px, "px/F")
   t1.Branch("py", py, "py/F")
   t1.Branch("pz", pz, "pz/F")
   t1.Branch("random", random, "random/D")
   t1.Branch("ev", ev, "ev/I")
   
   #
   # Fill the tree.
   #
   #for (Int_t i = 0; i < 10000; i++) {
   for i in range(0, 10000, 1):
      #
      gRandom.Rannor(px, py)
      # This "pz = px * px + py * py" is:
      pz.value = px.value **2 + py.value **2
      
      #
      random.value = gRandom.Rndm()
      #
      ev.value     = i
      #
      t1.Fill()
      
   
   #
   # Save the Tree header.
   t1.Write()
   #
   # The file will NOT be automatically closed
   # when going out of the function scope.
   f.Close()
   

# void
def tree1r() :

   """
   Read the Tree generated by the "tree1w" function
   and putting its information by filling two new histograms.

   """
   
   #
   # Note that we use "global" to create the TFile and TTree objects !
   # Because we want to keep these objects alive when we leave this function.
   global f, t1
   f  = TFile("tree1.root") # TFile
   t1 = f.Get("t1")         # (TTree *)

   #
   # Set-up the branch.
   px, py, pz = ( c_float() for _ in range( 3 ) )  # Float_t *
   random     = c_double()                         # Double_t *
   ev         = c_int()                            # Int_t *
   #
   t1.SetBranchAddress("px", px)
   t1.SetBranchAddress("py", py)
   t1.SetBranchAddress("pz", pz)
   t1.SetBranchAddress("random", random)
   t1.SetBranchAddress("ev", ev)
   
   #
   # Create two histograms.
   global hpx, hpxpy
   hpx   = TH1F("hpx", "px distribution", 100, -3, 3)       # TH1F
   hpxpy = TH2F("hpxpy", "py vs px", 30, -3, 3, 30, -3, 3)  # TH2F
   
   #
   # Read all entries and fill the histograms.
   #
   nentries = t1.GetEntries()  # Long64_t
   #
   #for (Long64_t i = 0; i < nentries; i++) {
   for i in range(0, nentries, 1):
      #
      t1.GetEntry ( i      )
      hpx.Fill    ( px.value     )
      hpxpy.Fill  ( px.value, py.value )
      
   
   #
   # We do not close the file, because we want to keep 
   # alive the generated histograms.


   # We open a browser and start the TreeViewer.
   if (gROOT.IsBatch())  :
      return
   #
   global new_browser
   new_browser = TBrowser()
   t1.StartViewer()
   #
   # Note :
   #       In the browser, click on "ROOT Files", then on "tree1.root".
   #       Now, you can click on the histogram icons in the right panel 
   #       to draw them.
   #       In the TreeViewer, follow the instructions in the "Help" button.

   
   #
   # Allow to use the TTree after the end of the function.
   t1.ResetBranchAddresses()
   

# void
def tree1() :

   # Write.
   tree1w()

   # Read.
   tree1r()
   


if __name__ == "__main__":
   tree1()
