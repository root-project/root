## \file
## \ingroup tutorial_tree
## \notebook
##
## A simple tree analysis with tuples.
##
## \macro_image
## \macro_code
##
## \author Rene Brun
## \translator P. P.


import ROOT
import ctypes
from array import array



# standard library
from ROOT import std
from ROOT.std import (
                       make_shared,
                       unique_ptr,
                       )

# classes
from ROOT import (
                   TPad,
                   TString,
                   TCanvas,
                   TH1F,
                   TGraph,
                   TLatex,
                   TBenchmark,
                   TCanvas,
                   TF1,
                   TFile,
                   TFrame,
                   TInterpreter,
                   TNtuple,
                   TPaveText,
                   TProfile,
                   TROOT,
                   TStyle,
                   TSystem,
                   )

#maths
from ROOT import (
                   sin,
                   cos,
                   sqrt,
                   )

#types
from ROOT import (
                   Double_t,
                   Bool_t,
                   Float_t,
                   Int_t,
                   nullptr,
                   )

from ctypes import (
                     c_double,
                     c_int,
                     c_float,
                     )


#utils
def to_c( ls ):
   return (c_double * len(ls) )( * ls )
def printf(string, *args):
   print( string % args, end="")
def sprintf(buffer, string, *args):
   buffer = string % args 
   return buffer

#constants
from ROOT import (
                   kBlue,
                   kRed,
                   kGreen,
                   )

# globals
from ROOT import (
                   gDirectory,
                   gBenchmark,
                   gInterpreter,
                   gStyle,
                   gPad,
                   gRandom,
                   gBenchmark,
                   gROOT,
                   )

# c integration
from ROOT import BindObject




# void
def ntuple1() :
   
   #
   # Just in case this script is executed multiple times.
   #
   _hsimple = gROOT.GetListOfFiles().FindObject("hsimple.root")
   _c1      = gROOT.GetListOfCanvases().FindObject("c1")
   #
   #try :
   #   gROOT.Remove( _hsimple )
   #   gROOT.Remove( _c1      )
   #except TypeError:
   #   pass
   if _hsimple : gROOT.Remove( _hsimple ) ; _hsimple.Clear()
   if _c1      : gROOT.Remove( _c1      )
   

   #
   gBenchmark.Start("ntuple1")
   #
   # Connect the ROOT histogram/ntuple demonstration with
   # the file generated by the example $ROOTSYS/tutorials/hsimple.C.
   #
   tut_dir = gROOT.GetTutorialDir()  # TString
   Dir = tut_dir + TString()
   Dir.Append("/hsimple.C")
   Dir.ReplaceAll("/./", "/")
   if (gBenchmark.GetBench("hsimple") < 0)  :
      gInterpreter.LoadMacro(Dir.Data())
      
   #
   _f1 = gROOT.ProcessLineFast("hsimple(1)") # Int_t # address
   global f1
   f1 = BindObject( _f1 , TFile)  # (TFile *)
   if ( not f1 ) :
      return
      
   #
   # Create a canvas along with 4 pads in.
   #
   global c1
   c1 = TCanvas("c1", "The Ntuple canvas", 200, 10, 700, 780)  # TCanvas
   #
   global pad1, pad2, pad3, pad4
   pad1 = TPad("pad1", "This is pad1", 0.02, 0.52, 0.48, 0.98, 21)  # TPad
   pad2 = TPad("pad2", "This is pad2", 0.52, 0.52, 0.98, 0.98, 21)  # TPad
   pad3 = TPad("pad3", "This is pad3", 0.02, 0.02, 0.48, 0.48, 21)  # TPad
   pad4 = TPad("pad4", "This is pad4", 0.52, 0.02, 0.98, 0.48, 1)  # TPad
   #
   pad1.Draw()
   pad2.Draw()
   pad3.Draw()
   pad4.Draw()
   

   #
   # Change default style for the statistics box.
   gStyle.SetStatW(0.30)
   gStyle.SetStatH(0.20)
   

   #
   # Display a function of one ntuple column while
   # imposing a condition on another column.
   pad1.cd()
   pad1.SetGrid()
   pad1.SetLogy()
   #
   global ntuple
   ntuple = f1.Get("ntuple")  # (TNtuple *)
   #
   ntuple.SetLineColor(1)
   ntuple.SetFillStyle(1001)
   #
   ntuple.SetFillColor(45)
   ntuple.Draw("3*px+2", "px**2+py**2>1")
   #
   # Imposition. "same" is the argument for.
   ntuple.SetFillColor(38)
   ntuple.Draw("2*px+2", "pz>2", "same")
   #
   ntuple.SetFillColor(5)
   ntuple.Draw("1.3*px+2", "(px^2+py^2>4) && py>0", "same") 
   #
   pad1.RedrawAxis()


   #
   # Display the profile of two columns.
   #
   # The profile histogram produced is saved in the
   # current directory with the name hprofs.
   #
   pad2.cd()
   pad2.SetGrid()
   #
   ntuple.Draw("pz:px>>hprofs", "", "goffprofs")
   #
   global hprofs
   hprofs = gDirectory.Get("hprofs")  # (TProfile *)
   #
   hprofs.SetMarkerColor(5)
   hprofs.SetMarkerSize(0.7)
   hprofs.SetMarkerStyle(21)
   #
   hprofs.Fit("pol2")

   #
   # Get pointer to the fitted function and modify its attributes.
   global fpol2
   fpol2 = hprofs.GetFunction("pol2") # TF1 *
   fpol2.SetLineWidth(4)
   fpol2.SetLineColor(2)


   #
   # Display a scatter plot of two columns with a selection,
   # and superimpose the result of another cut with a different marker color
   #
   pad3.cd()
   pad3.GetFrame().SetBorderSize(8)
   #
   ntuple.SetMarkerColor(1)
   ntuple.Draw("py:px", "pz>1")
   # Superimposition. First set color, then draw it with "same" argument.
   ntuple.SetMarkerColor(2)
   ntuple.Draw("py:px", "pz<1", "same")


   #
   # Display a 3-D scatter plot of 3 columns. 
   # Superimpose a different selection.
   #
   pad4.cd()
   #
   ntuple.Draw("pz:py:px", "(pz<10 && pz>6)+(pz<4 && pz>3)") 
   #
   ntuple.SetMarkerColor(4)
   ntuple.Draw("pz:py:px", "pz<6 && pz>4", "same") 
   #
   ntuple.SetMarkerColor(5)
   ntuple.Draw("pz:py:px", "pz<4 && pz>3", "same") 
   #
   #
   global l4
   l4 = TPaveText(-0.9, 0.5, 0.9, 0.95)  # TPaveText
   #
   l4.SetFillColor(42)
   l4.SetTextAlign(12)
   #
   l4.AddText("You can interactively rotate this view in 2 ways:")
   l4.AddText("  - With the RotateCube in clicking in this pad")
   l4.AddText("  - Selecting View with x3d in the View menu")
   #
   l4.Draw()
   

   #
   c1.cd()
   c1.Update()
   c1.Draw()

   #
   gStyle.SetStatColor(19)
   #
   gBenchmark.Show("ntuple1")
   


if __name__ == "__main__":
   ntuple1()
