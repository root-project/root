## \file
## \ingroup tutorial_tree
## \notebook 
##
##
## tvdemoy.py : 
##
## This script was translated from the tvdemo.C of root/tutorials/tree/:
## >>> : 
##    |  =========Macro generated by ROOT version3.00/00
##    |  =========for tree "T" (Wed Feb 21 14:16:23 2001)
##    |  ===This macro can be opened from a TreeViewer session after loading
##    |  ===the corresponding tree
##
## Since there is not generator for a python script from 
## a TreeViewer session, there is only generator for ".C" 
## macros, this scrit had to be done manually for the 
## python side. It could serve as future python script 
## generator.
##
## Note : 
##        In the .C version. You did have to :
##        "Compile class Event from test directory before running this."
##        However, and fortunately, in this .py version, 
##        you don't have to compile manually; this script does it 
##        automatically the first run. Just make sure you have
##        Event.py in the current directory.
##        Also, for the data, you will need to have the "tree4.py" 
##        tutorial.
##        
##
## \macro_code
## \author The ROOT Team
## \author P. P.

import os
import ctypes
from array import array

import ROOT

# standard library
from ROOT import std
from ROOT.std import (
                       make_shared,
                       unique_ptr,
                       )

# classes
from ROOT import (
                   TTVSession,
                   TTreeViewer,
                   TFile,
                   TCanvas,
                   TH1F,
                   TGraph,
                   TLatex,
)

# maths
from ROOT import (
                   sin,
                   cos,
                   sqrt,
)

# types
from ROOT import (
                   Double_t,
                   Bool_t,
                   Float_t,
                   Int_t,
                   nullptr,
)
#
from ctypes import c_double

# utils
def to_c( ls ):
   return (c_double * len(ls) )( * ls )
def printf(string, *args):
   print( string % args, end="")
def sprintf(buffer, string, *args):
   buffer = string % args 
   return buffer

# constants
from ROOT import (
                   kBlue,
                   kRed,
                   kGreen,
)

# globals
from ROOT import (
                   gStyle,
                   gPad,
                   gRandom,
                   gBenchmark,
                   gROOT,
)



# void
def open_session(p : TTreeViewer = 0) :

   #
   global treeview
   treeview = p                  # (TTreeViewer *)
   if ( not treeview ) :
      treeview =  TTreeViewer()  # new
      
   #
   global tv_tree, tv_file
   # Try old ROOT files :
   tv_tree = gROOT.FindObject("T")                            # (TTree *)
   tv_file = gROOT.GetListOfFiles().FindObject("Event.root")  # (TFile *)
   #
   # Instead :
   if not tv_tree :
      tv_tree = gROOT.FindObject("t4")                            # (TTree *)
   if not tv_file : 
      tv_file = gROOT.GetListOfFiles().FindObject("./tree4.root")  # (TFile *)
   global tree_name
   if not "tree_name" in globals():
      tree_name = "t4"


   #
   global file_event, file_name
   file_event =  "$ROOTSYS/test/Event.root"
   if ( not tv_tree ) :
      if ( not tv_file ) :
         # OLD :
         # tv_file =  TFile("$ROOTSYS/test/Event.root")  # new
         # Instead _
         if os.path.exists( file_event ):
            file_name = os.path.expand( file_event )
         else :
            Warning( file_event, "not_found. Using tree4.root instead" )
            print( " >> >> >> >> >> >> >> >> >> >> " ) 
            print( " >> >> >> Generating tree4.root " )
            from tree4 import tree4w
            tree4w()
            print( " << << << << << << << << << << " ) 
            print( " << << << tree4.root generated successfully. " )
            # file_name = os.path.expand( "./tree4.root" )
            file_name = "./tree4.root" 

         tv_file =  TFile( file_name ) # TFile * 
         
      if (tv_file)  :
         #
         #for key in tv_file.GetListOfKeys():
         #   print( key )
         #print( "Using the last item.") 
         #tree_name = key.GetName()
         tree_name = "t4" 
         #
         tv_tree = tv_file.Get( tree_name )                    # (TTree *)
         
      if ( not tv_tree ) :
         printf("Tree not found\n")
         return
         
      
   
   #
   #treeview.SetTreeName("T")
   treeview.SetTreeName( tree_name )
   treeview.SetNexpressions(10)

   #
   # Set expressions on axis and cut.
   #
   global item_list
   item_list = [ ] # [ TTVLVEntry()  ]
   #
   # X expression.
   item_list.append( treeview.ExpressionItem(0)                    )
   item_list[ -1 ] . SetExpression("fTemperature", "fTemperature") 
   #
   # Y expression.
   item_list.append( treeview.ExpressionItem(1)                    )
   item_list[ -1 ] . SetExpression("", "-empty-")                  
   #
   # Z expression.
   item_list.append( treeview.ExpressionItem(2)                    )
   item_list[ -1 ] . SetExpression("", "-empty-")                  
   #
   # Cut expression.
   item_list.append( treeview.ExpressionItem(3)                    )
   item_list[ -1 ] . SetExpression("", "-empty-")                  
   #
   # Scan list.
   item_list.append( treeview.ExpressionItem(4)                    )
   item_list[ -1 ] . SetExpression("", "Scan box")                 


   #
   # User defined expressions
   #
   item_list.append( treeview.ExpressionItem(5) )
   item_list[ -1 ] . SetExpression(
                        "sqrt(fTracks.fPx*fTracks.fPx+fTracks.fPy*fTracks.fPy)", 
                        "~Pt", 
                        False,
                        ) 
   #
   item_list.append( treeview.ExpressionItem(6)                    )
   item_list[ -1 ] . SetExpression("fTracks.fPx>0", "~Cut1", True) 
   #
   item_list.append( treeview.ExpressionItem(7)                    )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           
   #
   item_list.append( treeview.ExpressionItem(8)                    )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           
   #
   item_list.append( treeview.ExpressionItem(9)                    )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           
   #
   item_list.append( treeview.ExpressionItem(10)                   )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           
   #
   item_list.append( treeview.ExpressionItem(11)                   )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           
   #
   item_list.append( treeview.ExpressionItem(12)                   )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           
   #
   item_list.append( treeview.ExpressionItem(13)                   )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           
   #
   item_list.append( treeview.ExpressionItem(14)                   )
   item_list[ -1 ] . SetExpression("", "-empty-", False)           


   #
   #--- Session object.
   #
   global tv_session
   tv_session = TTVSession ( treeview   ) # auto # new
   treeview.SetSession     ( tv_session )



   #
   #--- Tree viewer record.
   #
   global tv_record_list
   tv_record_list = [ ]
   tv_record_list.append( tv_session.AddRecord( True ) )  # auto
   #
   tv_session.SetRecordName( "Temperature" )
   #
   tv_record_list[ -1 ].fX              = "fTemperature"
   tv_record_list[ -1 ].fY              = ""
   tv_record_list[ -1 ].fZ              = ""
   tv_record_list[ -1 ].fCut            = ""
   tv_record_list[ -1 ].fXAlias         = "fTemperature"
   tv_record_list[ -1 ].fYAlias         = "-empty-"
   tv_record_list[ -1 ].fZAlias         = "-empty-"
   tv_record_list[ -1 ].fCutAlias       = "-empty-"
   tv_record_list[ -1 ].fOption         = "lego1"
   tv_record_list[ -1 ].fScanRedirected = False
   tv_record_list[ -1 ].fCutEnabled     = True
   #
   #--- Tree viewer record.
   #
   tv_record_list.append( tv_session.AddRecord(True) )
   tv_session.SetRecordName("Py versus Px")
   #
   tv_record_list[ -1 ].fX              = "fTracks.fPx"
   tv_record_list[ -1 ].fY              = "fTracks.fPy"
   tv_record_list[ -1 ].fZ              = ""
   tv_record_list[ -1 ].fCut            = ""
   tv_record_list[ -1 ].fXAlias         = "fTracks.fPx"
   tv_record_list[ -1 ].fYAlias         = "fTracks.fPy"
   tv_record_list[ -1 ].fZAlias         = "-empty-"
   tv_record_list[ -1 ].fCutAlias       = "-empty-"
   tv_record_list[ -1 ].fOption         = "lego"
   tv_record_list[ -1 ].fScanRedirected = False
   tv_record_list[ -1 ].fCutEnabled     = True
   #
   #--- Tree viewer record.
   #
   tv_record_list.append( tv_session.AddRecord(True) )
   tv_session.SetRecordName("Transverse momentum")
   #
   tv_record_list[ -1 ].fX              = \
                                          "sqrt( "                             \
                                          "      fTracks.fPx * fTracks.fPx + " \
                                          "      fTracks.fPy * fTracks.fPy   " \
                                          "      ) "
   tv_record_list[ -1 ].fY              = ""
   tv_record_list[ -1 ].fZ              = ""
   tv_record_list[ -1 ].fCut            = "fTracks.fPx>0"
   tv_record_list[ -1 ].fXAlias         = "~Pt"
   tv_record_list[ -1 ].fYAlias         = "-empty-"
   tv_record_list[ -1 ].fZAlias         = "-empty-"
   tv_record_list[ -1 ].fCutAlias       = "~Cut1"
   tv_record_list[ -1 ].fOption         = ""
   tv_record_list[ -1 ].fScanRedirected = False
   tv_record_list[ -1 ].fCutEnabled     = True
   #
   #--- Tree viewer record.
   #
   tv_record_list.append( tv_session.AddRecord( True ) )
   tv_session.SetRecordName("Surface plot of Py vs. Px")
   #
   tv_record_list[ -1 ].fX              = "fTracks.fPx"
   tv_record_list[ -1 ].fY              = "fTracks.fPy"
   tv_record_list[ -1 ].fZ              = ""
   tv_record_list[ -1 ].fCut            = ""
   tv_record_list[ -1 ].fXAlias         = "fTracks.fPx"
   tv_record_list[ -1 ].fYAlias         = "fTracks.fPy"
   tv_record_list[ -1 ].fZAlias         = "-empty-"
   tv_record_list[ -1 ].fCutAlias       = "-empty-"
   tv_record_list[ -1 ].fOption         = "SURF"
   tv_record_list[ -1 ].fScanRedirected = False
   tv_record_list[ -1 ].fCutEnabled     = True


   #
   #--- Show first record.
   #
   tv_session.Show( tv_session.First( ) )

   

# void
def tvdemo() :
   #
   print ( "- - - - - - - - - - - - - - - - - - - - - - - - - "                         )
   print ( "| This demo show how to handle TTreeViewer sessions from Python3:"          )
   print ( "| - Use arrow buttons from bottom to cycle records ..."                     )
   print ( "| - Make new expressions and drag them to X, Y, Z or Cut items ..."         )
   print ( "| - Use the Draw button to check your current selection ..."                )
   print ( "| - Click the record button once you are happy with this ..."               )
   print ( "| - Open the TV context menu (right-click on the right panel)..."           )
   print ( "| - From TreeViewer class use the methods :                       "         )
   print ( "|    - .RemoveLastRecord() -> To remove last recordx.   "                   )
   print ( "|    - .SetRecordName()    -> To name current record"                       )
   print ( "|    - .UpdateRecord()     -> If you want to change a record from the list" )
   print ( "|                              with your new X, Y, Z, Cut configuration."   )
   print ( "|   Best of pythonic luck! "                                                )
   print ( "| - - - - - - - - - - - - - - - - - - - - - - - - - "                       )
   
   #
   open_session()
   


if __name__ == "__main__":
   tvdemo()
   #
   # TODO
   # Error at exit. 
   """
   Fatal Python error: none_dealloc: deallocating None: 
   bug likely caused by a refcount error in a C extension
   Python runtime state: finalizing (tstate=0x0000000000a71a18)
   
   Current thread 0x0000746303acf040 (most recent call first):
     <no Python frame>
    *** Break *** abort

   """
   #
