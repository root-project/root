## \file
## \ingroup tutorial_tree
## \notebook -nodraw
##
##
## Copy a subset of a Tree into a new Tree.
##
## The input file has been generated by the program in `$ROOTSYS/test/Event`
## with `Event 1000 1 1 1`.
##
##
## \macro_code
##
## \author Rene Brun
## \translator P. P.


import sys

import ctypes
from array import array

import ROOT


# standard library
from ROOT import std
from ROOT.std import (
                       make_shared,
                       unique_ptr,
                       )

# classes
from ROOT import (
                   TTree,
                   TFile,
                   TCanvas,
                   TH1F,
                   TGraph,
                   TLatex,
)

# maths
from ROOT import (
                   sin,
                   cos,
                   sqrt,
)

# types
from ROOT import (
                   Double_t,
                   Bool_t,
                   Float_t,
                   Int_t,
                   nullptr,
)
#
from ctypes import c_double

#utils
def to_c( ls ):
   return (c_double * len(ls) )( * ls )
def printf(string, *args):
   print( string % args, end="")
def sprintf(buffer, string, *args):
   buffer = string % args 
   return buffer

# constants
from ROOT import (
                   kBlue,
                   kRed,
                   kGreen,
)

# globals
from ROOT import (
                   gSystem,
                   gStyle,
                   gPad,
                   gRandom,
                   gBenchmark,
                   gROOT,
)



# Load the library at macro parsing time: 
#    we need this to use its content in the code.
#R__LOAD_LIBRARY($ROOTSYS / test / libEvent.so)
#
# The above is done in the Event.py script.
#
from Event import Event
#
try:
   # Not to use: 
   # gSystem.Load("$ROOTSYS / test / libEvent.so")
   # Instead :
   gSystem.Load("./Event/Event_cxx.so")
   Event = ROOT.Event
except:
   sys.exit()
   raise RuntimeError(" libEvent.so impossible to load." )



#void
def copytree() :

   """
   Getting old file, old tree and setting the top branch address.

   """

   Dir = "$ROOTSYS/test/Event.root"  # TString
   gSystem.ExpandPathName(Dir)
   #filename = "./Event.root" \
   file_name = "./tree4.root" \
         #if gSystem.AccessPathName(Dir) \
         #else "$ROOTSYS/test/Event.root" # auto
   
   #
   # Set-up old tree.
   global old_file, old_tree
   old_file = TFile( file_name )
   old_tree = TTree() # TTree * 
   #old_file.GetObject["TTree"]("T", old_tree)
   old_file.GetObject["TTree"]("t4", old_tree)



   
   #
   # Deactivate all branches.
   old_tree.SetBranchStatus("*", 0)
   
   #
   # Activate only four of them.
   for activeBranchName in [
                             #"event",
                             "fNtrack",
                             "fNseg",
                             "fH",
                             ] :
      # 
      old_tree.SetBranchStatus(activeBranchName, 1)
   

   #
   # Create a new file plus a clone of an old tree in new file.
   global new_file, new_tree
   new_file = TFile("small.root", "recreate")
   new_tree = old_tree.CloneTree()  # auto
   

   #
   new_tree.Print()
   new_file.Write()

   #
   new_file.Close()

   #
   # Avoid memory leaks.
   new_file.Clear()
   new_file.Delete()
   #
   gROOT.Remove( old_file )
   #gROOT.Remove( old_tree )
   gROOT.Remove( new_file )
   #gROOT.Remove( new_tree )
   #del new_file
   


if __name__ == "__main__":
   copytree()
