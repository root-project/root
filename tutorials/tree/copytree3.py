## \file
## \ingroup tutorial_tree
## \notebook -nodraw
##
##
## Example of a PyRoot script on how to copy a subset of a Tree into a new Tree
## by selecting certain entries. In other word, only the selected 
## entries will be copied into the new Tree.
##
## Note :
##        The input file has been generated by the program in 
##        `$ROOTSYS/test/Event` with `Event 1000 1 99 1`.
##
##
## \macro_code
##
## \author Rene Brun
## \translator P. P.


import sys
import ctypes
from array import array

import ROOT


# standard library
from ROOT import std
from ROOT.std import (
                       make_shared,
                       unique_ptr,
                       )

# classes
from ROOT import (
                   TTree,
                   TFile,
                   TSeqI,
                   TCanvas,
                   TH1F,
                   TGraph,
                   TLatex,
)

# maths
from ROOT import (
                   sin,
                   cos,
                   sqrt,
)

# types
from ROOT import (
                   Double_t,
                   Bool_t,
                   Float_t,
                   Int_t,
                   nullptr,
)
#
from ctypes import c_double

# utils
def to_c( ls ):
   return (c_double * len(ls) )( * ls )
def printf(string, *args):
   print( string % args, end="")
def sprintf(buffer, string, *args):
   buffer = string % args 
   return buffer

# constants
from ROOT import (
                   kBlue,
                   kRed,
                   kGreen,
)

# globals
from ROOT import (
                   gSystem,
                   gStyle,
                   gPad,
                   gRandom,
                   gBenchmark,
                   gROOT,
)



#
# If the next line is not available in your versoin of ROOT:
# gSystem.Load("$ROOTSYS / test / libEvent.so")
# try this:
# 
try:
   gSystem.Load("./Event/Event_cxx.so")
   Event = ROOT.Event
except:
   print(" libEvent.so" ,
         " >>>Please, run tree4.py before.")
   sys.exit()


#void
def copytree3() :

   #
   # Get old file, old tree and set the top branch address.
   #
   Dir = "$ROOTSYS/test/Event.root"  # TString
   gSystem.ExpandPathName(Dir)
   #filename = "./Event.root" \
   filename = "./tree4.root" \
         #if gSystem.AccessPathName(Dir) \
         #else "$ROOTSYS/test/Event.root" # auto
   
   #
   global oldfile, oldtree
   oldfile = TFile( filename )
   oldtree = TTree() # TTree * 
   #oldfile.GetObject["TTree"]("T", oldtree)
   oldfile.GetObject["TTree"]("t4", oldtree)
   

   # 
   event = Event() # nullptr # * 
   #oldtree.SetBranchAddress("event", event)
   oldtree.SetBranchAddress("event_not_split", event)
   
   #
   # Create a new file + a clone of the old tree in a new file.
   global newfile, newtree
   newfile = TFile("small.root", "recreate")
   newtree = oldtree.CloneTree(0)  # auto
   
   #
   nentries = oldtree.GetEntries() # auto
   #for (auto i : ROOT::TSeqI(nentries))  :
   #for i in range( nentries ) : # python
   for i in TSeqI( nentries ) :  # ROOT
      #
      oldtree.GetEntry(i)
      #
      if (event.GetNtrack() > 605)  :
         newtree.Fill()
      #
      event.Clear()
      
   
   #
   newtree.Print()
   #
   newfile.Write()
   newfile.Close()

   #
   newfile.Clear()
   newfile.Delete()
   gROOT.Remove( newfile )
   del newfile

   
   


if __name__ == "__main__":
   copytree3()
