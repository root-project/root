//
// File generated by /cdf/home/pcanal/scratch/code/root.gcc3.untouched/bin/rootcint at Mon Jul 29 14:11:34 2002.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

#include "Dict.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

// Since CLING ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "RtypesImp.h"

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::MemberMyObject MemberMyObject;
      #else
      class MemberMyObject  {
         public:
         //friend XX;
         vector<int> v; //
      };
      #endif

   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void MemberMyObject_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void MemberMyObject_Dictionary();

   TClass *MemberMyObject_IsA(const void*);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const MemberMyObject*)
   {
      // Make sure the shadow class has the right sizeof
      Assert(sizeof(::MemberMyObject) == sizeof(ROOT::Shadow::MemberMyObject));
      MemberMyObject *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("MemberMyObject", "MemberMyObject.h", 3,
                  typeid(MemberMyObject), DefineBehavior(ptr, ptr),
                  (void*)&MemberMyObject_ShowMembers, &MemberMyObject_Dictionary, &MemberMyObject_IsA, 4);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init)
      = GenerateInitInstance((const MemberMyObject*)0x0);

   // Dictionary for non-ClassDef classes
   void MemberMyObject_Dictionary() {
      ROOT::GenerateInitInstance((const MemberMyObject*)0x0)->GetClass();
   }

   // Return the actual TClass for the object argument
   TClass *MemberMyObject_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(MemberMyObject*)obj));
   }
}

namespace ROOT {
   void vectorlEintcOallocatorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void vectorlEintcOallocatorlEintgRsPgR_Dictionary();

   TClass *vectorlEintcOallocatorlEintgRsPgR_IsA(const void*);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const vector<int,allocator<int> >*)
   {
      vector<int,allocator<int> > *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("vector<int,allocator<int> >", "prec_stl/vector", 32,
                  typeid(vector<int,allocator<int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEintcOallocatorlEintgRsPgR_Dictionary, &vectorlEintcOallocatorlEintgRsPgR_IsA, 4);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init)
      = GenerateInitInstance((const vector<int,allocator<int> >*)0x0);

   // Dictionary for non-ClassDef classes
   void vectorlEintcOallocatorlEintgRsPgR_Dictionary() {
      ROOT::GenerateInitInstance((const vector<int,allocator<int> >*)0x0)->GetClass();
   }

   // Return the actual TClass for the object argument
   TClass *vectorlEintcOallocatorlEintgRsPgR_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(vector<int,allocator<int> >*)obj));
   }
}

namespace ROOT {
   void MyObject_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *MyObject_IsA(const void*);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const MyObject*)
   {
      MyObject *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("MyObject", MyObject::Class_Version(), "MyObject.h", 4,
                  typeid(MyObject), DefineBehavior(ptr, ptr),
                  &::MyObject::Dictionary, 4);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init)
      = GenerateInitInstance((const MyObject*)0x0);
}

//______________________________________________________________________________
TClass *MyObject::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyObject::Class_Name()
{
   return "MyObject";
}

//______________________________________________________________________________
const char *MyObject::ImplFileName()
{
   return ROOT::GenerateInitInstance((const MyObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyObject::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const MyObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyObject::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const MyObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyObject::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const MyObject*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MyObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyObject.

   if (R__b.IsReading()) {
      MyObject::Class()->ReadBuffer(R__b, this);
   } else {
      MyObject::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void MyObject::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyObject.

      TClass *R__cl = MyObject::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "memberMyObject", (void*)&memberMyObject);
      ROOT::GenericShowMembers("MemberMyObject", &memberMyObject, R__insp, strcat(R__parent,"memberMyObject."),false);
      R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

//______________________________________________________________________________
void R__MemberMyObject_v(TBuffer &R__b, void *R__p, int)
{
   vector<int> &v = *(vector<int> *)R__p;
   if (R__b.IsReading()) {
      {
         vector<int> &R__stl =  v;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
   } else {
      {
         vector<int> &R__stl =  v;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(!R__n) return;
         vector<int>::iterator R__k;
         for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
         }
      }
   }
}

//______________________________________________________________________________
namespace ROOT {
   void MemberMyObject_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class MemberMyObject.

      typedef ROOT::Shadow::MemberMyObject ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ROOT::GenerateInitInstance((const MemberMyObject*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "v", (void*)&sobj->v);
      ROOT::GenericShowMembers("vector<int>", &sobj->v, R__insp, strcat(R__parent,"v."),false);
      R__parent[R__ncp] = 0;
      R__cl->SetStreamer("v",R__MemberMyObject_v);
   }

}

/********************************************************
* Dict.cc
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableDict();

extern "C" void G__set_cpp_environmentDict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MyObject.h");
  G__cpp_reset_tagtableDict();
}
class G__DictdOcc_tag {};

void* operator new(size_t size,G__DictdOcc_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__DictdOcc_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_DictdOcc() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MemberMyObject */
static int G__MemberMyObject_MemberMyObject_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   MemberMyObject *p=NULL;
   if(G__getaryconstruct()) p=new MemberMyObject[G__getaryconstruct()];
   else p=::new((G__DictdOcc_tag*)G__getgvp()) MemberMyObject;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_MemberMyObject);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MemberMyObject_MemberMyObject_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   MemberMyObject *p=NULL;
      p=::new((G__DictdOcc_tag*)G__getgvp()) MemberMyObject((int)G__int(libp->para[0]),(int)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_MemberMyObject);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MemberMyObject_MemberMyObject_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   MemberMyObject *p;
   p=new MemberMyObject(*(MemberMyObject*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_MemberMyObject);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MemberMyObject G__TMemberMyObject;
static int G__MemberMyObject_wAMemberMyObject_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (MemberMyObject *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((MemberMyObject *)((G__getstructoffset())+sizeof(MemberMyObject)*i))->~G__TMemberMyObject();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((MemberMyObject *)(G__getstructoffset()))->~G__TMemberMyObject();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<int,allocator<int> > */
static int G__vectorlEintcOallocatorlEintgRsPgR_begin_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<int,allocator<int> >::iterator *pobj,xobj=((vector<int,allocator<int> >*)(G__getstructoffset()))->begin();
        pobj=new vector<int,allocator<int> >::iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_end_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<int,allocator<int> >::iterator *pobj,xobj=((vector<int,allocator<int> >*)(G__getstructoffset()))->end();
        pobj=new vector<int,allocator<int> >::iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_rbegin_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<int,allocator<int> >::reverse_iterator *pobj,xobj=((vector<int,allocator<int> >*)(G__getstructoffset()))->rbegin();
        pobj=new vector<int,allocator<int> >::reverse_iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_rend_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<int,allocator<int> >::reverse_iterator *pobj,xobj=((vector<int,allocator<int> >*)(G__getstructoffset()))->rend();
        pobj=new vector<int,allocator<int> >::reverse_iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_size_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const vector<int,allocator<int> >*)(G__getstructoffset()))->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_max_size_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const vector<int,allocator<int> >*)(G__getstructoffset()))->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_capacity_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const vector<int,allocator<int> >*)(G__getstructoffset()))->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_empty_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const vector<int,allocator<int> >*)(G__getstructoffset()))->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_operatoroBcB_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        int& obj=((vector<int,allocator<int> >*)(G__getstructoffset()))->operator[]((vector<int,allocator<int> >::size_type)G__int(libp->para[0]));
         result7->ref=(long)(&obj); result7->obj.i=(long)(obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<int,allocator<int> > *p=NULL;
   if(G__getaryconstruct()) p=new vector<int,allocator<int> >[G__getaryconstruct()];
   else p=::new((G__DictdOcc_tag*)G__getgvp()) vector<int,allocator<int> >;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<int,allocator<int> > *p=NULL;
   switch(libp->paran) {
   case 2:
      p = ::new((G__DictdOcc_tag*)G__getgvp()) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type)G__int(libp->para[0]),*(int*)G__Intref(&libp->para[1]));
      break;
   case 1:
      p = ::new((G__DictdOcc_tag*)G__getgvp()) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type)G__int(libp->para[0]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<int,allocator<int> > *p=NULL;
      p=::new((G__DictdOcc_tag*)G__getgvp()) vector<int,allocator<int> >(*(vector<int,allocator<int> >*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<int,allocator<int> > *p=NULL;
      p=::new((G__DictdOcc_tag*)G__getgvp()) vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*)G__int(libp->para[0])),*((vector<int,allocator<int> >::const_iterator*)G__int(libp->para[1])));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_operatoreQ_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<int,allocator<int> >& obj=((vector<int,allocator<int> >*)(G__getstructoffset()))->operator=(*(vector<int,allocator<int> >*)libp->para[0].ref);
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_reserve_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->reserve((vector<int,allocator<int> >::size_type)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_front_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        int& obj=((vector<int,allocator<int> >*)(G__getstructoffset()))->front();
         result7->ref=(long)(&obj); result7->obj.i=(long)(obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_back_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        int& obj=((vector<int,allocator<int> >*)(G__getstructoffset()))->back();
         result7->ref=(long)(&obj); result7->obj.i=(long)(obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_push_back_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->push_back(*(int*)G__Intref(&libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_swap_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->swap(*(vector<int,allocator<int> >*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_insert_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<int,allocator<int> >::iterator *pobj,xobj=((vector<int,allocator<int> >*)(G__getstructoffset()))->insert(*((vector<int,allocator<int> >::iterator*)G__int(libp->para[0])),*(int*)G__Intref(&libp->para[1]));
        pobj=new vector<int,allocator<int> >::iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_insert_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->insert(*((vector<int,allocator<int> >::iterator*)G__int(libp->para[0])),*((vector<int,allocator<int> >::const_iterator*)G__int(libp->para[1]))
,*((vector<int,allocator<int> >::const_iterator*)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_insert_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->insert(*((vector<int,allocator<int> >::iterator*)G__int(libp->para[0])),(vector<int,allocator<int> >::size_type)G__int(libp->para[1])
,*(int*)G__Intref(&libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_pop_back_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->pop_back();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_erase_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->erase(*((vector<int,allocator<int> >::iterator*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_erase_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->erase(*((vector<int,allocator<int> >::iterator*)G__int(libp->para[0])),*((vector<int,allocator<int> >::iterator*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEintcOallocatorlEintgRsPgR_clear_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<int,allocator<int> >*)(G__getstructoffset()))->clear();
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<int,allocator<int> > G__TvectorlEintcOallocatorlEintgRsPgR;
static int G__vectorlEintcOallocatorlEintgRsPgR_wAvectorlEintcOallocatorlEintgRsPgR_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (vector<int,allocator<int> > *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((vector<int,allocator<int> > *)((G__getstructoffset())+sizeof(vector<int,allocator<int> >)*i))->~G__TvectorlEintcOallocatorlEintgRsPgR();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((vector<int,allocator<int> > *)(G__getstructoffset()))->~G__TvectorlEintcOallocatorlEintgRsPgR();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyObject */
static int G__MyObject_MyObject_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   MyObject *p=NULL;
   if(G__getaryconstruct()) p=new MyObject[G__getaryconstruct()];
   else                    p=new MyObject;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_MyObject);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_MyObject_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   MyObject *p=NULL;
      p = new MyObject((int)G__int(libp->para[0]),(int)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__DictLN_MyObject);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_Class_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((MyObject*)(G__getstructoffset()))->Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_Class_Name_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((MyObject*)(G__getstructoffset()))->Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_Class_Version_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((MyObject*)(G__getstructoffset()))->Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_Dictionary_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MyObject*)(G__getstructoffset()))->Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_IsA_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const MyObject*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_ShowMembers_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MyObject*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_Streamer_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MyObject*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_StreamerNVirtual_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MyObject*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_DeclFileName_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((MyObject*)(G__getstructoffset()))->DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_ImplFileLine_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((MyObject*)(G__getstructoffset()))->ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_ImplFileName_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((MyObject*)(G__getstructoffset()))->ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyObject_DeclFileLine_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((MyObject*)(G__getstructoffset()))->DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyObject_MyObject_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   MyObject *p;
   p=new MyObject(*(MyObject*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__DictLN_MyObject);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyObject G__TMyObject;
static int G__MyObject_wAMyObject_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (MyObject *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (MyObject *)((G__getstructoffset())+sizeof(MyObject)*i);
   else  delete (MyObject *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MemberMyObject */

/* vector<int,allocator<int> > */

/* MyObject */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDict {
 public:
  G__Sizep2memfuncDict() {p=&G__Sizep2memfuncDict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDict::*p)();
};

size_t G__get_sizep2memfuncDict()
{
  G__Sizep2memfuncDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_MyObject))) {
     MyObject *G__Lderived;
     G__Lderived=(MyObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_MyObject),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,
-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,
-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Seek_t",105,-1,0,
-1);
   G__setnewtype(-1,"File pointer (int)",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,
-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,
-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Float 8 bytes (double)",0);
   G__search_typename2("Text_t",99,-1,0,
-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,
-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,0,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Ssiz_t",105,-1,0,
-1);
   G__setnewtype(-1,"String size (int)",0);
   G__search_typename2("Real_t",102,-1,0,
-1);
   G__setnewtype(-1,"TVector and TMatrix element type (float)",0);
   G__search_typename2("Streamer_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VoidFuncPtr_t",89,-1,0,
-1);
   G__setnewtype(-1,"pointer to void function",0);
   G__search_typename2("ShowMembersFunc_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("IsAFunc_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FreeHookFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocCFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Axis_t",100,-1,0,
-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("Stat_t",100,-1,0,
-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Id$",0);
   G__search_typename2("value_type",105,-1,0,
G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector_type",117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("__normal_iterator<int*,vector_type>",117,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Id$",0);
   G__search_typename2("iterator<std::iterator_traits<int*>::iterator_category,std::iterator_traits<int*>::value_type,std::iterator_traits<int*>::difference_type,std::iterator_traits<int*>::pointer,std::iterator_traits<int*>::reference>",117,G__get_linked_tagnum(&G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Id$",0);
   G__search_typename2("value_type",105,-1,0,
G__get_linked_tagnum(&G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,
G__get_linked_tagnum(&G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,0,
G__get_linked_tagnum(&G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator_category",117,G__get_linked_tagnum(&G__DictLN_random_access_iterator_tag),0,G__get_linked_tagnum(&G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("normal_iterator_type",117,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("__traits_type",117,G__get_linked_tagnum(&G__DictLN_iterator_traitslEintmUgR),0,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator_category",117,G__get_linked_tagnum(&G__DictLN_random_access_iterator_tag),0,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,
G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,
G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,0,
G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",117,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,
G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,0,
G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,0,
G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,0,
G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("random_access_iterator<int,difference_type>",117,G__get_linked_tagnum(&G__DictLN_random_access_iteratorlEintcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Id$",0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MemberMyObject */
static void G__setup_memvarMemberMyObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_MemberMyObject));
   { MemberMyObject *p; p=(MemberMyObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->v)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"v=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<int,allocator<int> > */
static void G__setup_memvarvectorlEintcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   { vector<int,allocator<int> > *p; p=(vector<int,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* MyObject */
static void G__setup_memvarMyObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_MyObject));
   { MyObject *p; p=(MyObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->memberMyObject)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DictLN_MemberMyObject),-1,-1,1,"memberMyObject=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMemberMyObject(void) {
   /* MemberMyObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_MemberMyObject));
   G__memfunc_setup("MemberMyObject",1397,G__MemberMyObject_MemberMyObject_0_0,105,G__get_linked_tagnum(&G__DictLN_MemberMyObject),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MemberMyObject",1397,G__MemberMyObject_MemberMyObject_1_0,105,G__get_linked_tagnum(&G__DictLN_MemberMyObject),-1,0,2,1,1,0,
"i - - 0 - allocated i - - 0 - filled",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("MemberMyObject",1397,G__MemberMyObject_MemberMyObject_2_0,(int)('i'),G__get_linked_tagnum(&G__DictLN_MemberMyObject),-1,0,1,1,1,0,"u 'MemberMyObject' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~MemberMyObject",1523,G__MemberMyObject_wAMemberMyObject_3_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR(void) {
   /* vector<int,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__memfunc_setup("begin",517,G__vectorlEintcOallocatorlEintgRsPgR_begin_0_0,117,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR),G__defined_typename("vector<int,allocator<int> >::iterator"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("end",311,G__vectorlEintcOallocatorlEintgRsPgR_end_1_0,117,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR),G__defined_typename("vector<int,allocator<int> >::iterator"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("rbegin",631,G__vectorlEintcOallocatorlEintgRsPgR_rbegin_2_0,117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLreverse_iterator),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("rend",425,G__vectorlEintcOallocatorlEintgRsPgR_rend_3_0,117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLreverse_iterator),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("size",443,G__vectorlEintcOallocatorlEintgRsPgR_size_4_0,104,-1,G__defined_typename("vector<int,allocator<int> >::size_type"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("max_size",864,G__vectorlEintcOallocatorlEintgRsPgR_max_size_5_0,104,-1,G__defined_typename("vector<int,allocator<int> >::size_type"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("capacity",846,G__vectorlEintcOallocatorlEintgRsPgR_capacity_6_0,104,-1,G__defined_typename("vector<int,allocator<int> >::size_type"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("empty",559,G__vectorlEintcOallocatorlEintgRsPgR_empty_7_0,103,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator[]",1060,G__vectorlEintcOallocatorlEintgRsPgR_operatoroBcB_8_0,105,-1,-1,1,1,1,1,0,"h - 'vector<int,allocator<int> >::size_type' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_9_0,105,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_0_1,105,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),-1,0,2,1,1,0,
"h - 'vector<int,allocator<int> >::size_type' 0 - n i - - 11 int() value",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_1_1,105,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),-1,0,1,1,1,0,"u 'vector<int,allocator<int> >' - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__vectorlEintcOallocatorlEintgRsPgR_vectorlEintcOallocatorlEintgRsPgR_2_1,105,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),-1,0,2,1,1,0,
"u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::const_iterator' 0 - first u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::const_iterator' 0 - last",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__vectorlEintcOallocatorlEintgRsPgR_operatoreQ_4_1,117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),-1,1,1,1,1,0,"u 'vector<int,allocator<int> >' - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("reserve",764,G__vectorlEintcOallocatorlEintgRsPgR_reserve_5_1,121,-1,-1,0,1,1,1,0,"h - 'vector<int,allocator<int> >::size_type' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("front",553,G__vectorlEintcOallocatorlEintgRsPgR_front_6_1,105,-1,-1,1,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("back",401,G__vectorlEintcOallocatorlEintgRsPgR_back_7_1,105,-1,-1,1,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("push_back",944,G__vectorlEintcOallocatorlEintgRsPgR_push_back_8_1,121,-1,-1,0,1,1,1,0,"i - - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("swap",443,G__vectorlEintcOallocatorlEintgRsPgR_swap_9_1,121,-1,-1,0,1,1,1,0,"u 'vector<int,allocator<int> >' - 1 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("insert",661,G__vectorlEintcOallocatorlEintgRsPgR_insert_0_2,117,G__get_linked_tagnum(&G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR),G__defined_typename("vector<int,allocator<int> >::iterator"),0,2,1,1,0,
"u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::iterator' 0 - position i - - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("insert",661,G__vectorlEintcOallocatorlEintgRsPgR_insert_1_2,121,-1,-1,0,3,1,1,0,
"u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::iterator' 0 - position u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::const_iterator' 0 - first "
"u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::const_iterator' 0 - last",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("insert",661,G__vectorlEintcOallocatorlEintgRsPgR_insert_2_2,121,-1,-1,0,3,1,1,0,
"u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::iterator' 0 - position h - 'vector<int,allocator<int> >::size_type' 0 - n "
"i - - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("pop_back",831,G__vectorlEintcOallocatorlEintgRsPgR_pop_back_3_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("erase",528,G__vectorlEintcOallocatorlEintgRsPgR_erase_4_2,121,-1,-1,0,1,1,1,0,"u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::iterator' 0 - position",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("erase",528,G__vectorlEintcOallocatorlEintgRsPgR_erase_5_2,121,-1,-1,0,2,1,1,0,
"u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::iterator' 0 - first u '__normal_iterator<int*,vector<int,allocator<int> > >' 'vector<int,allocator<int> >::iterator' 0 - last",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("clear",519,G__vectorlEintcOallocatorlEintgRsPgR_clear_6_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~vector<int,allocator<int> >",2728,G__vectorlEintcOallocatorlEintgRsPgR_wAvectorlEintcOallocatorlEintgRsPgR_7_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyObject(void) {
   /* MyObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_MyObject));
   G__memfunc_setup("MyObject",797,G__MyObject_MyObject_0_0,105,G__get_linked_tagnum(&G__DictLN_MyObject),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MyObject",797,G__MyObject_MyObject_1_0,105,G__get_linked_tagnum(&G__DictLN_MyObject),-1,0,2,1,1,0,
"i - - 0 - allocated i - - 0 - filled",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__MyObject_Class_2_0,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__MyObject_Class_Name_3_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__MyObject_Class_Version_4_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__MyObject_Dictionary_5_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__MyObject_IsA_6_0,85,G__get_linked_tagnum(&G__DictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__MyObject_ShowMembers_7_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__MyObject_Streamer_8_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyObject_StreamerNVirtual_9_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__MyObject_DeclFileName_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__MyObject_ImplFileLine_1_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__MyObject_ImplFileName_2_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__MyObject_DeclFileLine_3_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("MyObject",797,G__MyObject_MyObject_4_1,(int)('i'),G__get_linked_tagnum(&G__DictLN_MyObject),-1,0,1,1,1,0,"u 'MyObject' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~MyObject",923,G__MyObject_wAMyObject_5_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DictLN_random_access_iterator_tag = { "random_access_iterator_tag" , 115 , -1 };
G__linked_taginfo G__DictLN_MemberMyObject = { "MemberMyObject" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR = { "__normal_iterator<int*,vector<int,allocator<int> > >" , 99 , -1 };
G__linked_taginfo G__DictLN_iterator_traitslEintmUgR = { "iterator_traits<int*>" , 115 , -1 };
G__linked_taginfo G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR = { "iterator<random_access_iterator_tag,int,long,int*,int&>" , 115 , -1 };
G__linked_taginfo G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLreverse_iterator = { "vector<int,allocator<int> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_random_access_iteratorlEintcOlonggR = { "random_access_iterator<int,long>" , 115 , -1 };
G__linked_taginfo G__DictLN_MyObject = { "MyObject" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDict() {
  G__DictLN_TClass.tagnum = -1 ;
  G__DictLN_TObject.tagnum = -1 ;
  G__DictLN_random_access_iterator_tag.tagnum = -1 ;
  G__DictLN_MemberMyObject.tagnum = -1 ;
  G__DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DictLN___normal_iteratorlEintmUcOvectorlEintcOallocatorlEintgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_iterator_traitslEintmUgR.tagnum = -1 ;
  G__DictLN_iteratorlErandom_access_iterator_tagcOintcOlongcOintmUcOintaNgR.tagnum = -1 ;
  G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DictLN_random_access_iteratorlEintcOlonggR.tagnum = -1 ;
  G__DictLN_MyObject.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDict() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_MemberMyObject),sizeof(MemberMyObject),-1,262400,(char*)NULL,G__setup_memvarMemberMyObject,G__setup_memfuncMemberMyObject);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),sizeof(vector<int,allocator<int> >),-1,265984,(char*)NULL,G__setup_memvarvectorlEintcOallocatorlEintgRsPgR,G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__DictLN_MyObject),sizeof(MyObject),-1,291072,(char*)NULL,G__setup_memvarMyObject,G__setup_memfuncMyObject);
}
extern "C" void G__cpp_setupDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDict()");
  G__set_cpp_environmentDict();
  G__cpp_setup_tagtableDict();

  G__cpp_setup_inheritanceDict();

  G__cpp_setup_typetableDict();

  G__cpp_setup_memvarDict();

  G__cpp_setup_memfuncDict();
  G__cpp_setup_globalDict();
  G__cpp_setup_funcDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDict();
  return;
}
class G__cpp_setup_initDict {
  public:
    G__cpp_setup_initDict() { G__add_setup_func("Dict",(G__incsetup)(&G__cpp_setupDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDict() { G__remove_setup_func("Dict"); }
};
G__cpp_setup_initDict G__cpp_setup_initializerDict;

