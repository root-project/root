diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx
index b177e90..2f39146 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx
+++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx
@@ -756,6 +756,12 @@ static PyMethodDef gCPyCppyyMethods[] = {
     {nullptr, nullptr, 0, nullptr}
 };
 
+#define QuoteIdent(ident) #ident
+#define QuoteMacro(macro) QuoteIdent(macro)
+#define LIBCPPYY_NAME "libcppyy" QuoteMacro(PY_MAJOR_VERSION) "_" QuoteMacro(PY_MINOR_VERSION)
+
+#define CONCAT(a, b, c, d) a##b##c##d
+#define LIBCPPYY_INIT_FUNCTION(a, b, c, d) CONCAT(a, b, c, d)
 
 #if PY_VERSION_HEX >= 0x03000000
 struct module_state {
@@ -778,7 +784,7 @@ static int cpycppyymodule_clear(PyObject* m)
 
 static struct PyModuleDef moduledef = {
     PyModuleDef_HEAD_INIT,
-    "libcppyy",
+    LIBCPPYY_NAME,
     nullptr,
     sizeof(struct module_state),
     gCPyCppyyMethods,
@@ -791,10 +797,10 @@ static struct PyModuleDef moduledef = {
 
 //----------------------------------------------------------------------------
 #define CPYCPPYY_INIT_ERROR return nullptr
-extern "C" PyObject* PyInit_libcppyy()
+LIBCPPYY_INIT_FUNCTION(extern "C" PyObject* PyInit_libcppyy, PY_MAJOR_VERSION, _, PY_MINOR_VERSION) ()
 #else
 #define CPYCPPYY_INIT_ERROR return
-extern "C" void initlibcppyy()
+LIBCPPYY_INIT_FUNCTION(extern "C" void initlibcppyy, PY_MAJOR_VERSION, _, PY_MINOR_VERSION) ()
 #endif
 {
 // Initialization of extension module libcppyy.
@@ -823,7 +829,7 @@ extern "C" void initlibcppyy()
 #if PY_VERSION_HEX >= 0x03000000
     gThisModule = PyModule_Create(&moduledef);
 #else
-    gThisModule = Py_InitModule(const_cast<char*>("libcppyy"), gCPyCppyyMethods);
+    gThisModule = Py_InitModule(const_cast<char*>(LIBCPPYY_NAME), gCPyCppyyMethods);
 #endif
     if (!gThisModule)
         CPYCPPYY_INIT_ERROR;
diff --git a/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py b/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
index b3b1b84..0d2fa35 100644
--- a/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
+++ b/bindings/pyroot/cppyy/cppyy/python/cppyy/__init__.py
@@ -50,6 +50,67 @@ from ._version import __version__
 
 import os, sys, sysconfig, warnings
 
+import importlib
+
+# import libcppyy with Python version number
+major, minor = sys.version_info[0:2]
+py_version_str = '{}_{}'.format(major, minor)
+libcppyy_mod_name = 'libcppyy' + py_version_str
+
+try:
+    importlib.import_module(libcppyy_mod_name)
+except ImportError:
+    raise ImportError(
+            'Failed to import {}. Please check that ROOT has been built for Python {}.{}'.format(
+                libcppyy_mod_name, major, minor))
+
+# ensure 'import libcppyy' will find the versioned module
+sys.modules['libcppyy'] = sys.modules[libcppyy_mod_name]
+
+# tell cppyy that libcppyy_backend is versioned
+def _check_py_version(lib_name, cbl_var):
+    import re
+    if re.match('^libcppyy_backend\d_\d$', lib_name):
+       # library name already has version
+       if lib_name.endswith(py_version_str):
+           return ''
+       else:
+           raise RuntimeError('CPPYY_BACKEND_LIBRARY variable ({})'
+                              ' does not match Python version {}.{}'
+                              .format(cbl_var, major, minor))
+    else:
+       return py_version_str
+
+if 'CPPYY_BACKEND_LIBRARY' in os.environ:
+    clean_cbl = False
+    cbl_var = os.environ['CPPYY_BACKEND_LIBRARY']
+    start = 0
+    last_sep = cbl_var.rfind(os.path.sep)
+    if last_sep >= 0:
+        start = last_sep + 1
+    first_dot = cbl_var.find('.', start)
+    if first_dot >= 0:
+        # lib_name = [/path/to/]libcppyy_backend[py_version_str]
+        # suffix = so | ...
+        lib_name = cbl_var[:first_dot]
+        suff = cbl_var[first_dot+1:]
+        ver = _check_py_version(lib_name[start:], cbl_var)
+        os.environ['CPPYY_BACKEND_LIBRARY'] = '.'.join([
+            lib_name + ver, suff])
+    else:
+        ver = _check_py_version(cbl_var[start:], cbl_var)
+        os.environ['CPPYY_BACKEND_LIBRARY'] += ver
+else:
+    clean_cbl = True
+    if not any(var in os.environ for var in ('LD_LIBRARY_PATH','DYLD_LIBRARY_PATH')):
+        # macOS SIP can prevent DYLD_LIBRARY_PATH from having any effect.
+        # Set cppyy env variable here to make sure libraries are found.
+        _lib_dir = os.path.dirname(os.path.dirname(__file__))
+        _lcb_path = os.path.join(_lib_dir, 'libcppyy_backend')
+        os.environ['CPPYY_BACKEND_LIBRARY'] = _lcb_path + py_version_str
+    else:
+        os.environ['CPPYY_BACKEND_LIBRARY'] = 'libcppyy_backend' + py_version_str
+
 if not 'CLING_STANDARD_PCH' in os.environ:
     local_pch = os.path.join(os.path.dirname(__file__), 'allDict.cxx.pch')
     if os.path.exists(local_pch):
@@ -69,6 +123,8 @@ if ispypy:
     from ._pypy_cppyy import *
 else:
     from ._cpython_cppyy import *
+if clean_cbl:
+    del os.environ['CPPYY_BACKEND_LIBRARY'] # we set it, so clean it


 #- allow importing from gbl --------------------------------------------------
