From 38983c14210be41b134abb6713912412b9c31cbd Mon Sep 17 00:00:00 2001
From: Jonas Rembser <jonas.rembser@cern.ch>
Date: Wed, 18 Dec 2024 03:02:32 +0100
Subject: [PATCH] Avoid `nullptr` dereferencing in
 CPyCppyy::BindCppObjectNoCast

Closes the following issue:

  * wlav/cppyy#281
---
 bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx     | 2 --
 bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx | 2 +-
 2 files changed, 1 insertion(+), 3 deletions(-)

diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx
index f70d8f1d0e..823e8ac60a 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx
+++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx
@@ -611,8 +611,6 @@ PyObject* CPyCppyy::CPPMethod::GetArgDefault(int iarg, bool silent)
         PyObject* gdct = *dctptr;
         PyObject* scope = nullptr;
 
-        std::string possible_scope = defvalue.substr(0, defvalue.rfind('('));
-
         if (defvalue.rfind('(') != std::string::npos) {    // constructor-style call
         // try to tickle scope creation, just in case, first look in the scope where
         // the function lives, then in the global scope
diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx
index 693ad7b367..037660498e 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx
+++ b/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx
@@ -836,7 +836,7 @@ PyObject* CPyCppyy::BindCppObjectNoCast(Cppyy::TCppObject_t address,
 
     bool noReg      = flags & (CPPInstance::kNoMemReg|CPPInstance::kNoWrapConv);
     bool isRef      = flags & CPPInstance::kIsReference;
-    void* r_address = isRef ? *(void**)address : address;
+    void* r_address = isRef ? (address ? *(void**)address : nullptr) : address;
 
 // check whether the object to be bound is a smart pointer that needs embedding
     PyObject* smart_type = (!(flags & CPPInstance::kNoWrapConv) && \
-- 
2.47.0

