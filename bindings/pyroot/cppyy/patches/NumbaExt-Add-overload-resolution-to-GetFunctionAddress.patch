From c129388c1bc4833ddf5f9e4bb49442feae06d480 Mon Sep 17 00:00:00 2001
From: Baidyanath Kundu <kundubaidya99@gmail.com>
Date: Mon, 5 Sep 2022 22:55:11 +0200
Subject: [PATCH 32/34] [PyROOT] Add overload resolution to GetFunctionAddress

---
 .../clingwrapper/src/clingwrapper.cxx         | 33 ++++++++++++++++---
 core/meta/inc/TInterpreter.h                  |  3 ++
 core/metacling/src/TCling.cxx                 |  8 +++++
 core/metacling/src/TCling.h                   |  2 ++
 4 files changed, 42 insertions(+), 4 deletions(-)

diff --git a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx b/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx
index ce742457e4..6ded72e668 100644
--- a/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx
+++ b/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx
@@ -337,6 +337,16 @@ TFunction* m2f(Cppyy::TCppMethod_t method) {
     return wrap->fTF;
 }
 
+static inline
+CallWrapper::DeclId_t m2d(Cppyy::TCppMethod_t method) {
+    CallWrapper* wrap = ((CallWrapper*)method);
+    if (!wrap->fTF || wrap->fTF->GetDeclId() != wrap->fDecl) {
+        MethodInfo_t* mi = gInterpreter->MethodInfo_Factory(wrap->fDecl);
+        wrap->fTF = new TFunction(mi);
+    }
+    return wrap->fDecl;
+}
+
 static inline
 char* cppstring_to_cstring(const std::string& cppstr)
 {
@@ -907,10 +917,25 @@ Cppyy::TCppFuncAddr_t Cppyy::GetFunctionAddress(TCppMethod_t method, bool check_
         sig << "template " << fn << ";";
         gInterpreter->ProcessLine(sig.str().c_str());
     } else {
-        std::string sfn = std::string("&")+fn;
-        std::string::size_type pos = sfn.find('(');
-        if (pos != std::string::npos) sfn = sfn.substr(0, pos);
-        gInterpreter->Calc(sfn.c_str());
+        std::string sfn(fn);
+        std::string addrstr;
+        addrstr.reserve(128);
+        addrstr.push_back('(');
+        addrstr.append(Cppyy::GetMethodResultType(method));
+        addrstr.append(" (");
+
+        if (gInterpreter->FunctionDeclId_IsMethod(m2d(method))) {
+            std::string::size_type colon = sfn.rfind("::");
+            if (colon != std::string::npos) addrstr.append(sfn.substr(0, colon+2));
+        }
+
+        addrstr.append("*)");
+        addrstr.append(Cppyy::GetMethodSignature(method, false));
+        addrstr.append(") &");
+
+        addrstr.append(sfn.substr(0, sfn.find('(')));
+
+        gInterpreter->Calc(addrstr.c_str());
     }
 
     return (TCppFuncAddr_t)gInterpreter->FindSym(f->GetMangledName());
diff --git a/core/meta/inc/TInterpreter.h b/core/meta/inc/TInterpreter.h
index 208fec73ab..7fd10beb58 100644
--- a/core/meta/inc/TInterpreter.h
+++ b/core/meta/inc/TInterpreter.h
@@ -562,6 +562,9 @@ public:
    virtual Bool_t IsPointerType(const void * /* QualTypePtr */) const {return 0;}
    virtual Bool_t IsVoidPointerType(const void * /* QualTypePtr */) const {return 0;}
 
+   // FunctionDecl interface 
+   virtual Bool_t FunctionDeclId_IsMethod(DeclId_t /* fdeclid */) const {return 0;}
+
    static TInterpreter *Instance();
 
    ClassDefOverride(TInterpreter,0)  //ABC defining interface to generic interpreter
diff --git a/core/metacling/src/TCling.cxx b/core/metacling/src/TCling.cxx
index d4a1982bad..5170bb9ad7 100644
--- a/core/metacling/src/TCling.cxx
+++ b/core/metacling/src/TCling.cxx
@@ -9501,6 +9501,14 @@ bool TCling::IsVoidPointerType(const void * QualTypePtr) const
 
 ////////////////////////////////////////////////////////////////////////////////
 
+bool TCling::FunctionDeclId_IsMethod(DeclId_t fdeclid) const
+{
+   clang::FunctionDecl *FD = (clang::FunctionDecl *) fdeclid;
+   return llvm::isa_and_nonnull<clang::CXXMethodDecl>(FD);
+}
+
+////////////////////////////////////////////////////////////////////////////////
+
 void TCling::SnapshotMutexState(ROOT::TVirtualRWMutex* mtx)
 {
    if (!fInitialMutex) {
diff --git a/core/metacling/src/TCling.h b/core/metacling/src/TCling.h
index 3a9053a861..0f3d57e07a 100644
--- a/core/metacling/src/TCling.h
+++ b/core/metacling/src/TCling.h
@@ -573,6 +573,8 @@ public: // Public Interface
    bool IsPointerType(const void * QualTypePtr) const;
    bool IsVoidPointerType(const void * QualTypePtr) const;
 
+   // FunctionDecl interface 
+   bool FunctionDeclId_IsMethod(DeclId_t fdeclid) const;
 
    std::set<TClass*>& GetModTClasses() { return fModTClasses; }
 
-- 
2.39.0

