From 98e0739a511fbfc3795c0bb119962fd310ae26e4 Mon Sep 17 00:00:00 2001
From: Jonas Rembser <jonas.rembser@cern.ch>
Date: Thu, 8 Aug 2024 13:03:28 +0200
Subject: [PATCH] Revert "don't allow implicit conversions for string_view to
 prevent taking"

This reverts commit b62b2561322b6c1fdc37ac525077524ea5b02fa0.
---
 src/Converters.cxx      | 46 +++++++++++++++--------------------------
 src/DeclareConverters.h | 18 ++++++++++++++--
 2 files changed, 33 insertions(+), 31 deletions(-)

diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx
index 4fa4768..35077f3 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx
+++ a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx
@@ -1833,8 +1833,8 @@ CPyCppyy::name##Converter::name##Converter(bool keepControl) :               \
 bool CPyCppyy::name##Converter::SetArg(                                      \
     PyObject* pyobject, Parameter& para, CallContext* ctxt)                  \
 {                                                                            \
-    if (CPyCppyy_PyUnicodeAsBytes2Buffer(pyobject, fBuffer)) {               \
-        para.fValue.fVoidp = &fBuffer;                                       \
+    if (CPyCppyy_PyUnicodeAsBytes2Buffer(pyobject, fStringBuffer)) {         \
+        para.fValue.fVoidp = &fStringBuffer;                                 \
         para.fTypeCode = 'V';                                                \
         return true;                                                         \
     }                                                                        \
@@ -1876,9 +1876,9 @@ bool CPyCppyy::STLWStringConverter::SetArg(
 {
     if (PyUnicode_Check(pyobject)) {
         Py_ssize_t len = CPyCppyy_PyUnicode_GET_SIZE(pyobject);
-        fBuffer.resize(len);
-        CPyCppyy_PyUnicode_AsWideChar(pyobject, &fBuffer[0], len);
-        para.fValue.fVoidp = &fBuffer;
+        fStringBuffer.resize(len);
+        CPyCppyy_PyUnicode_AsWideChar(pyobject, &fStringBuffer[0], len);
+        para.fValue.fVoidp = &fStringBuffer;
         para.fTypeCode = 'V';
         return true;
     }
@@ -1948,13 +1948,10 @@ bool CPyCppyy::STLStringViewConverter::SetArg(
             PyErr_Clear();
     }
 
-// passing of a Python string; buffering done Python-side b/c str is immutable
-    Py_ssize_t len;
-    const char* cstr = CPyCppyy_PyText_AsStringAndSize(pyobject, &len);
-    if (cstr) {
-        SetLifeLine(ctxt->fPyContext, pyobject, (intptr_t)this);
-        fBuffer = std::string_view(cstr, (std::string_view::size_type)len);
-        para.fValue.fVoidp = &fBuffer;
+// for Python str object: convert to single char string in buffer and take a view
+    if (CPyCppyy_PyUnicodeAsBytes2Buffer(pyobject, fStringBuffer)) {
+        fStringViewBuffer = fStringBuffer;
+        para.fValue.fVoidp = &fStringViewBuffer;
         para.fTypeCode = 'V';
         return true;
     }
@@ -1962,8 +1959,7 @@ bool CPyCppyy::STLStringViewConverter::SetArg(
     if (!CPPInstance_Check(pyobject))
         return false;
 
-// special case of a C++ std::string object; life-time management is left to
-// the caller to ensure any external changes propagate correctly
+// for C++ std::string object: buffer the string and take a view
     if (CPPInstance_Check(pyobject)) {
         static Cppyy::TCppScope_t sStringID = Cppyy::GetScope("std::string");
         CPPInstance* pyobj = (CPPInstance*)pyobject;
@@ -1974,8 +1970,9 @@ bool CPyCppyy::STLStringViewConverter::SetArg(
 
             PyErr_Clear();
 
-            fBuffer = *((std::string*)ptr);
-            para.fValue.fVoidp = &fBuffer;
+            fStringBuffer = *((std::string*)ptr);
+            fStringViewBuffer = fStringBuffer;
+            para.fValue.fVoidp = &fStringViewBuffer;
             para.fTypeCode = 'V';
             return true;
         }
@@ -1995,21 +1992,12 @@ PyObject* CPyCppyy::STLStringViewConverter::FromMemory(void* address)
 bool CPyCppyy::STLStringViewConverter::ToMemory(
     PyObject* value, void* address, PyObject* ctxt)
 {
-// common case of simple object assignment
-    if (InstanceConverter::ToMemory(value, address, ctxt))
-        return true;
-
-// assignment of a Python string; buffering done Python-side b/c str is immutable
-    Py_ssize_t len;
-    const char* cstr = CPyCppyy_PyText_AsStringAndSize(value, &len);
-    if (cstr) {
-        SetLifeLine(ctxt, value, (intptr_t)this);
-        *reinterpret_cast<std::string_view*>(address) = \
-            std::string_view(cstr, (std::string_view::size_type)len);
+    if (CPyCppyy_PyUnicodeAsBytes2Buffer(value, fStringBuffer)) {
+        fStringViewBuffer = fStringBuffer;
+        *reinterpret_cast<std::string_view*>(address) = fStringViewBuffer;
         return true;
     }
-
-    return false;
+    return InstanceConverter::ToMemory(value, address, ctxt);
 }
 #endif
 
diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/DeclareConverters.h a/bindings/pyroot/cppyy/CPyCppyy/src/DeclareConverters.h
index a08c091..44b62b4 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/DeclareConverters.h
+++ a/bindings/pyroot/cppyy/CPyCppyy/src/DeclareConverters.h
@@ -361,13 +361,27 @@ public:                                                                      \
     virtual bool HasState() { return true; }                                 \
                                                                              \
 protected:                                                                   \
-    strtype fBuffer;                                                         \
+    strtype fStringBuffer;                                                   \
 }
 
 CPPYY_DECLARE_STRING_CONVERTER(STLString, std::string);
 CPPYY_DECLARE_STRING_CONVERTER(STLWString, std::wstring);
+
 #if __cplusplus > 201402L
-CPPYY_DECLARE_STRING_CONVERTER(STLStringView, std::string_view);
+class STLStringViewConverter : public InstanceConverter {
+public:
+    STLStringViewConverter(bool keepControl = true);
+
+public:
+    virtual bool SetArg(PyObject*, Parameter&, CallContext* = nullptr);
+    virtual PyObject* FromMemory(void* address);
+    virtual bool ToMemory(PyObject*, void*, PyObject* = nullptr);
+    virtual bool HasState() { return true; }
+
+private:
+    std::string fStringBuffer;              // converted str data
+    std::string_view fStringViewBuffer;     // view on converted data
+};
 #endif
 
 class STLStringMoveConverter : public STLStringConverter {
-- 
2.46.0

