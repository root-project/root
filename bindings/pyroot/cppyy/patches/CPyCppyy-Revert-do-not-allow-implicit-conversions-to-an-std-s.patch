From 40210f3b2590b7b88de4c333e79850c7c53016f5 Mon Sep 17 00:00:00 2001
From: Jonas Rembser <jonas.rembser@cern.ch>
Date: Thu, 8 Aug 2024 13:03:39 +0200
Subject: [PATCH] Revert "do not allow implicit conversions to an
 std::string_view, as that by-passes the lifetime management"

This reverts commit c06170389ea6e37fc6f25f9f0e44940fb1035625.
---
 src/CallContext.h  | 18 ------------------
 src/Converters.cxx | 23 +++++++++++++----------
 2 files changed, 13 insertions(+), 28 deletions(-)

diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h a/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h
index 63a6afe..3ea8f65 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h
+++ a/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h
@@ -154,24 +154,6 @@ inline bool UseStrictOwnership(CallContext* ctxt) {
     return CallContext::sMemoryPolicy == CallContext::kUseStrict;
 }
 
-template<CallContext::ECallFlags F>
-class CallContextRAII {
-public:
-    CallContextRAII(CallContext* ctxt) : fCtxt(ctxt) {
-        fPrior = fCtxt->fFlags & F;
-        fCtxt->fFlags |= F;
-    }
-    CallContextRAII(const CallContextRAII&) = delete;
-    CallContextRAII& operator=(const CallContextRAII&) = delete;
-    ~CallContextRAII() {
-        if (fPrior) fCtxt->fFlags &= ~F;
-    }
-
-private:
-    CallContext* fCtxt;
-    bool fPrior;
-};
-
 } // namespace CPyCppyy
 
 #endif // !CPYCPPYY_CALLCONTEXT_H
diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx
index 35077f3..83a5e22 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx
+++ a/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx
@@ -1938,15 +1938,13 @@ CPyCppyy::STLStringViewConverter::STLStringViewConverter(bool keepControl) :
 bool CPyCppyy::STLStringViewConverter::SetArg(
     PyObject* pyobject, Parameter& para, CallContext* ctxt)
 {
-// normal instance convertion (eg. string_view object passed)
-    if (!PyInt_Check(pyobject) && !PyLong_Check(pyobject)) {
-        CallContextRAII<CallContext::kNoImplicit> noimp(ctxt);
-        if (InstanceConverter::SetArg(pyobject, para, ctxt)) {
-            para.fTypeCode = 'V';
-            return true;
-        } else
-            PyErr_Clear();
+// normal instance convertion (ie. string_view object passed)
+    if (!PyInt_Check(pyobject) && !PyLong_Check(pyobject) && \
+            InstanceConverter::SetArg(pyobject, para, ctxt)) {
+        para.fTypeCode = 'V';
+        return true;
     }
+    PyErr_Clear();
 
 // for Python str object: convert to single char string in buffer and take a view
     if (CPyCppyy_PyUnicodeAsBytes2Buffer(pyobject, fStringBuffer)) {
@@ -2738,9 +2736,12 @@ bool CPyCppyy::StdFunctionConverter::SetArg(
     PyObject* pyobject, Parameter& para, CallContext* ctxt)
 {
 // prefer normal "object" conversion
-    CallContextRAII<CallContext::kNoImplicit> noimp(ctxt);
-    if (fConverter->SetArg(pyobject, para, ctxt))
+    bool rf = ctxt->fFlags & CallContext::kNoImplicit;
+    ctxt->fFlags |= CallContext::kNoImplicit;
+    if (fConverter->SetArg(pyobject, para, ctxt)) {
+        if (!rf) ctxt->fFlags &= ~CallContext::kNoImplicit;
         return true;
+    }
 
     PyErr_Clear();
 
@@ -2754,10 +2755,12 @@ bool CPyCppyy::StdFunctionConverter::SetArg(
             bool result = fConverter->SetArg(func, para, ctxt);
             if (result) ctxt->AddTemporary(func);
             else Py_DECREF(func);
+            if (!rf) ctxt->fFlags &= ~CallContext::kNoImplicit;
             return result;
         }
     }
 
+    if (!rf) ctxt->fFlags &= ~CallContext::kNoImplicit;
     return false;
 }
 
-- 
2.46.0

