From c291c32ebbfe45704c9932ac49959eb38eaa91cf Mon Sep 17 00:00:00 2001
From: Baidyanath Kundu <kundubaidya99@gmail.com>
Date: Mon, 5 Sep 2022 14:22:26 +0200
Subject: [PATCH 26/34] [PyROOT] Add GetArgMatchScore function

---
 .../pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx   | 33 +++++++++++++++++++
 .../pyroot/cppyy/CPyCppyy/src/CPPMethod.h     |  2 ++
 bindings/pyroot/cppyy/CPyCppyy/src/Cppyy.h    |  2 ++
 .../pyroot/cppyy/CPyCppyy/src/PyCallable.h    |  4 +++
 4 files changed, 41 insertions(+)

diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx
index 3ff7cf4453..f741415c3e 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx
+++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx
@@ -553,6 +553,39 @@ Cppyy::TCppFuncAddr_t CPyCppyy::CPPMethod::GetFunctionAddress()
     return Cppyy::GetFunctionAddress(fMethod, false /* don't check fast path envar */);
 }
 
+//----------------------------------------------------------------------------
+int CPyCppyy::CPPMethod::GetArgMatchScore(PyObject* args_tuple)
+{
+    Py_ssize_t n = PyTuple_Size(args_tuple);
+
+    int req_args = Cppyy::GetMethodReqArgs(fMethod);
+    
+    // Not enough arguments supplied: no match
+    if (req_args > n)
+        return INT_MAX;
+    
+    size_t score = 0;
+    for (int i = 0; i < n; i++) {
+        PyObject *pItem = PyTuple_GetItem(args_tuple, i);
+        if(!CPyCppyy_PyText_Check(pItem)) {
+            PyErr_SetString(PyExc_TypeError, "argument types should be in string format");
+            return INT_MAX;
+        }
+        std::string req_type(CPyCppyy_PyText_AsString(pItem));
+
+        size_t arg_score = Cppyy::CompareMethodArgType(fMethod, i, req_type);
+
+        // Method is not compatible if even one argument does not match
+        if (arg_score >= 10) {
+            score = INT_MAX;
+            break;
+        }
+
+        score += arg_score;
+    }
+
+    return score;
+}
 
 //----------------------------------------------------------------------------
 bool CPyCppyy::CPPMethod::Initialize(CallContext* ctxt)
diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.h b/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.h
index 65cc6850c3..0801efaa7f 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.h
+++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.h
@@ -40,6 +40,8 @@ public:
 
     virtual PyCallable* Clone() { return new CPPMethod(*this); }
 
+    virtual int       GetArgMatchScore(PyObject* args_tuple);
+
 public:
     virtual PyObject* Call(
         CPPInstance*& self, PyObject* args, PyObject* kwds, CallContext* ctxt = nullptr);
diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/Cppyy.h b/bindings/pyroot/cppyy/CPyCppyy/src/Cppyy.h
index f85a922dc5..dd8a3b9c6b 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/Cppyy.h
+++ b/bindings/pyroot/cppyy/CPyCppyy/src/Cppyy.h
@@ -180,6 +180,8 @@ namespace Cppyy {
     CPPYY_IMPORT
     std::string GetMethodArgType(TCppMethod_t, TCppIndex_t iarg);
     CPPYY_IMPORT
+    TCppIndex_t CompareMethodArgType(TCppMethod_t, TCppIndex_t iarg, const std::string &req_type);
+    CPPYY_IMPORT
     std::string GetMethodArgDefault(TCppMethod_t, TCppIndex_t iarg);
     CPPYY_IMPORT
     std::string GetMethodSignature(TCppMethod_t, bool show_formalargs, TCppIndex_t maxargs = (TCppIndex_t)-1);
diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/PyCallable.h b/bindings/pyroot/cppyy/CPyCppyy/src/PyCallable.h
index c807e8abab..b324bc69f3 100644
--- a/bindings/pyroot/cppyy/CPyCppyy/src/PyCallable.h
+++ b/bindings/pyroot/cppyy/CPyCppyy/src/PyCallable.h
@@ -1,6 +1,8 @@
 #ifndef CPYCPPYY_PYCALLABLE_H
 #define CPYCPPYY_PYCALLABLE_H
 
+#include <climits>
+
 // Bindings
 #include "CPyCppyy/Reflex.h"
 #include "CallContext.h"
@@ -37,6 +39,8 @@ public:
 
     virtual PyCallable* Clone() = 0;
 
+    virtual int GetArgMatchScore(PyObject* /* args_tuple */) { return INT_MAX; }
+
 public:
     virtual PyObject* Call(
         CPPInstance*& self, PyObject* args, PyObject* kwds, CallContext* ctxt = nullptr) = 0;
-- 
2.39.0

