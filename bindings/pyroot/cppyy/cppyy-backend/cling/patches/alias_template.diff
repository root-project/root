diff --git a/src/interpreter/cling/include/cling/Interpreter/LookupHelper.h b/src/interpreter/cling/include/cling/Interpreter/LookupHelper.h
index 5c344223c6..d0b9b060d2 100644
--- a/src/interpreter/cling/include/cling/Interpreter/LookupHelper.h
+++ b/src/interpreter/cling/include/cling/Interpreter/LookupHelper.h
@@ -116,6 +116,15 @@ namespace cling {
     const clang::ClassTemplateDecl*
     findClassTemplate(llvm::StringRef Name, DiagSetting diagOnOff) const;
 
+    ///\brief Determine whether a name represents a class template.
+    ///
+    ///\param [in] Name   - The name of the class template to lookup.
+    ///\param [in] diagOnOff - Whether to diagnose lookup failures.
+    ///\returns The found declaration or null.
+    ///
+    bool
+    existsClassTemplate(llvm::StringRef Name, DiagSetting diagOnOff) const;
+
     ///\brief Lookup a data member based on its Decl(Context), name.
     ///
     ///\param [in] scopeDecl - the scope (namespace or tag) that is searched for
diff --git a/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp b/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp
index a863eb7db1..5dacfdc59f 100644
--- a/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp
+++ b/src/interpreter/cling/lib/Interpreter/LookupHelper.cpp
@@ -906,6 +906,148 @@ namespace cling {
     return 0;
   }
 
+  bool LookupHelper::existsClassTemplate(llvm::StringRef Name, DiagSetting diagOnOff) const {
+    //
+    //  Find whether a class template exists, given its name.
+    //
+
+    // This code is basically findClassTemplate, which is isn't AFAICT used in any
+    // other capacity than "exists", returning a Decl*, but since this is a patch,
+    // there is no reason to spend the effort in refactoring.
+
+    if (Name.empty()) return 0;
+
+    // Humm ... this seems to do the trick ... or does it? or is there a better way?
+
+    // Use P for shortness
+    Parser& P = *m_Parser;
+    Sema& S = P.getActions();
+    ASTContext& Context = S.getASTContext();
+    StartParsingRAII ParseStarted(const_cast<LookupHelper&>(*this),
+                                  Name.str(),
+                                  llvm::StringRef("lookup.class.by.name.file"),
+                                  diagOnOff);
+
+    //
+    //  Prevent failing on an assert in TryAnnotateCXXScopeToken.
+    //
+    if (!P.getCurToken().is(clang::tok::identifier)
+        && !P.getCurToken().is(clang::tok::coloncolon)
+        && !(P.getCurToken().is(clang::tok::annot_template_id)
+             && P.NextToken().is(clang::tok::coloncolon))
+        && !P.getCurToken().is(clang::tok::kw_decltype)) {
+      // error path
+      return 0;
+    }
+
+    //
+    //  Now try to parse the name as a type.
+    //
+    if (P.TryAnnotateTypeOrScopeToken()) {
+      // error path
+      return 0;
+    }
+    DeclContext *where = 0;
+    if (P.getCurToken().getKind() == tok::annot_cxxscope) {
+      CXXScopeSpec SS;
+      S.RestoreNestedNameSpecifierAnnotation(P.getCurToken().getAnnotationValue(),
+                                             P.getCurToken().getAnnotationRange(),
+                                             SS);
+      if (SS.isValid()) {
+        P.ConsumeAnyToken();
+        if (!P.getCurToken().is(clang::tok::identifier)) {
+          return 0;
+        }
+        NestedNameSpecifier *nested = SS.getScopeRep();
+        if (!nested) return 0;
+        switch (nested->getKind()) {
+        case NestedNameSpecifier::Global:
+          where = Context.getTranslationUnitDecl();
+          break;
+        case NestedNameSpecifier::Namespace:
+          where = nested->getAsNamespace();
+          break;
+        case NestedNameSpecifier::NamespaceAlias:
+        case NestedNameSpecifier::Identifier:
+           return 0;
+        case NestedNameSpecifier::TypeSpec:
+        case NestedNameSpecifier::TypeSpecWithTemplate:
+          {
+            const Type *ntype = nested->getAsType();
+            where = ntype->getAsCXXRecordDecl();
+            if (!where) return 0;
+            break;
+          }
+        case NestedNameSpecifier::Super:
+          // Microsoft's __super::
+          return 0;
+        };
+      }
+    } else if (P.getCurToken().is(clang::tok::annot_typename)) {
+      // A deduced template?
+
+      // P.getTypeAnnotation() takes a non-const Token& until clang r306291.
+      //auto ParsedTy = P.getTypeAnnotation(P.getCurToken());
+      auto ParsedTy
+        = ParsedType::getFromOpaquePtr(P.getCurToken().getAnnotationValue());
+      if (ParsedTy) {
+        QualType QT = ParsedTy.get();
+        const Type* TyPtr = QT.getTypePtr();
+        if (const auto *LocInfoTy = dyn_cast<LocInfoType>(TyPtr))
+          TyPtr = LocInfoTy->getType().getTypePtr();
+        TyPtr = TyPtr->getUnqualifiedDesugaredType();
+        if (const auto *DTST
+            = dyn_cast<DeducedTemplateSpecializationType>(TyPtr)) {
+          if (auto TD = DTST->getTemplateName().getAsTemplateDecl()) {
+            if (auto CTD = dyn_cast<ClassTemplateDecl>(TD))
+               return CTD;
+            else if (auto TAT = dyn_cast<TypeAliasTemplateDecl>(TD)) {
+               TypeAliasDecl* Pattern = TAT->getCanonicalDecl()->getTemplatedDecl();
+               if (Pattern && !Pattern->isInvalidDecl()) {
+                  QualType QT = Pattern->getUnderlyingType().getCanonicalType();
+                  if (!QT.isNull() && QT.getTypePtr()) {
+                     if (auto TST = dyn_cast<TemplateSpecializationType>(QT.getTypePtr()))
+                        return TST->getTemplateName().getAsTemplateDecl();
+                     if (dyn_cast<DependentNameType>(QT.getTypePtr()))
+                        return true;
+                 }
+              }
+            }
+          }
+        }
+      }
+    } else if (P.getCurToken().is(clang::tok::identifier)) {
+      // We have a single indentifier, let's look for it in the
+      // the global scope.
+      where = Context.getTranslationUnitDecl();
+    }
+    if (where) {
+      // Great we now have a scope and something to search for,let's go ahead.
+      Interpreter::PushTransactionRAII pushedT(m_Interpreter);
+      DeclContext::lookup_result R
+        = where->lookup(P.getCurToken().getIdentifierInfo());
+      for (DeclContext::lookup_iterator I = R.begin(), E = R.end();
+           I != E; ++I) {
+      // this is the same code as above under the deduced type and needs refactoring
+         if (auto CTD = dyn_cast<ClassTemplateDecl>(*I))
+            return CTD;
+         else if (auto TAT = dyn_cast<TypeAliasTemplateDecl>(*I)) {
+             TypeAliasDecl* Pattern = TAT->getCanonicalDecl()->getTemplatedDecl();
+             if (Pattern && !Pattern->isInvalidDecl()) {
+                 QualType QT = Pattern->getUnderlyingType().getCanonicalType();
+                 if (!QT.isNull() && QT.getTypePtr()) {
+                    if (auto TST = dyn_cast<TemplateSpecializationType>(QT.getTypePtr()))
+                       return TST->getTemplateName().getAsTemplateDecl();
+                    if (dyn_cast<DependentNameType>(QT.getTypePtr()))
+                       return true;
+                 }
+             }
+         }
+      }
+    }
+    return 0;
+  }
+
   const ValueDecl* LookupHelper::findDataMember(const clang::Decl* scopeDecl,
                                                 llvm::StringRef dataName,
                                                 DiagSetting diagOnOff) const {
