diff --git a/src/interpreter/cling/include/cling/Interpreter/DynamicLibraryManager.h b/src/interpreter/cling/include/cling/Interpreter/DynamicLibraryManager.h
index d6e1006334..d982cb61d6 100644
--- a/src/interpreter/cling/include/cling/Interpreter/DynamicLibraryManager.h
+++ b/src/interpreter/cling/include/cling/Interpreter/DynamicLibraryManager.h
@@ -160,9 +160,9 @@ namespace cling {
     /// other error was encountered.
     ///
     LoadLibResult loadLibrary(llvm::StringRef, bool permanent,
-                              bool resolved = false);
+                              bool resolved = false, bool silent = false);
 
-    void unloadLibrary(llvm::StringRef libStem);
+    void unloadLibrary(llvm::StringRef libStem, bool silent = false);
 
     ///\brief Returns true if the file was a dynamic library and it was already
     /// loaded.
diff --git a/src/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp b/src/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp
index c49f06e411..f51530567e 100644
--- a/src/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp
+++ b/src/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp
@@ -350,7 +352,7 @@ namespace cling {
 
   DynamicLibraryManager::LoadLibResult
   DynamicLibraryManager::loadLibrary(llvm::StringRef libStem,
-                                     bool permanent, bool resolved) {
+                                     bool permanent, bool resolved, bool silent) {
     if (DEBUG > 7) {
       cling::errs() << "Dyld::loadLibrary: " << libStem.str() << ", " <<
         (permanent ? "permanent" : "not-permanent") << ", " <<
@@ -380,8 +382,11 @@ namespace cling {
           return kLoadLibSuccess;
       }
 
-      cling::errs() << "cling::DynamicLibraryManager::loadLibrary(): " << errMsg
-                    << '\n';
+      if (!silent) {
+          cling::errs() << "cling::DynamicLibraryManager::loadLibrary() ["
+                        << libStem << " -> " << canonicalLoadedLib << "]: "
+                        << errMsg << '\n';
+      }
       return kLoadLibLoadError;
     }
     else if (InterpreterCallbacks* C = getCallbacks())
@@ -396,7 +401,7 @@ namespace cling {
     return kLoadLibSuccess;
   }
 
-  void DynamicLibraryManager::unloadLibrary(llvm::StringRef libStem) {
+  void DynamicLibraryManager::unloadLibrary(llvm::StringRef libStem, bool silent) {
     std::string canonicalLoadedLib = lookupLibrary(libStem);
     if (!isLibraryLoaded(canonicalLoadedLib))
       return;
@@ -414,8 +419,9 @@ namespace cling {
 
     std::string errMsg;
     platform::DLClose(dyLibHandle, &errMsg);
-    if (!errMsg.empty()) {
-      cling::errs() << "cling::DynamicLibraryManager::unloadLibrary(): "
+    if (!errMsg.empty() && !silent) {
+      cling::errs() << "cling::DynamicLibraryManager::unloadLibrary() ["
+                    << libStem << " -> " << canonicalLoadedLib << "]: "
                     << errMsg << '\n';
     }
 
diff --git a/src/interpreter/cling/lib/Utils/PlatformWin.cpp b/src/interpreter/cling/lib/Utils/PlatformWin.cpp
index 6135f838e4..d4c5c39227 100644
--- a/src/interpreter/cling/lib/Utils/PlatformWin.cpp
+++ b/src/interpreter/cling/lib/Utils/PlatformWin.cpp
@@ -40,6 +40,7 @@
 #include <Psapi.h>   // EnumProcessModulesEx
 #include <direct.h>  // _getcwd
 #include <shlobj.h>  // SHGetFolderPath
+#include <shlwapi.h> // PathCanonicalize
 #pragma comment(lib, "Advapi32.lib")
 
 extern "C" char* __unDName(char *demangled, const char *mangled, int out_len,
@@ -533,8 +533,14 @@ std::string GetCwd() {
 
 std::string NormalizePath(const std::string& Path) {
   char Buf[MAX_PATHC];
-  if (const char* Result = ::_fullpath(Buf, Path.c_str(), sizeof(Buf)))
-    return std::string(Result);
+  if (const char* Result = ::_fullpath(Buf, Path.c_str(), MAX_PATH)) {
+    std::string fpath(Result);
+    if (PathCanonicalizeA(Buf, fpath.c_str()))
+      return std::string(Buf);
+
+    ReportLastError("PathCanonicalizeA");
+    return std::string();
+  }
 
   ReportLastError("_fullpath");
   return std::string();
@@ -637,6 +646,7 @@ const void* DLSym(const std::string& Name, std::string* Err) {
 }
 
 void DLClose(const void* Lib, std::string* Err) {
+  if (!Lib) return;
   if (::FreeLibrary(reinterpret_cast<HMODULE>(const_cast<void*>(Lib))) == 0) {
     if (Err)
       GetLastErrorAsString(*Err, "FreeLibrary");
