From 6b2a0b2f168f6615e46b6480df1cc4e961f855f6 Mon Sep 17 00:00:00 2001
From: Garima Singh <garimasingh0028@gmail.com>
Date: Tue, 25 Apr 2023 09:25:18 +0200
Subject: [PATCH] Fix failure on 32-bit machines due to ambigious cast.

Using `clad::array`'s `[]` operator causes an ambiguity error on 32 bit
machines when using a non-`std::size_t` type as the subscript
expression. This happens because `clad::array` can be implicity cast to
`double*` through the overloaded dereference operator. Changing the
subscript expression type in `clad::array` to `std::ptrdiff_t` solves
this issue.
---
 include/clad/Differentiator/Array.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/clad/Differentiator/Array.h b/include/clad/Differentiator/Array.h
index c5f7b46..59c5178 100644
--- a/include/clad/Differentiator/Array.h
+++ b/include/clad/Differentiator/Array.h
@@ -54,7 +54,7 @@ public:
   CUDA_HOST_DEVICE T* ptr() { return m_arr; }
   /// Returns the reference to the location at the index of the underlying
   /// array
-  CUDA_HOST_DEVICE T& operator[](std::size_t i) { return m_arr[i]; }
+  CUDA_HOST_DEVICE T& operator[](std::ptrdiff_t i) { return m_arr[i]; }
   /// Returns the reference to the underlying array
   CUDA_HOST_DEVICE T& operator*() { return *m_arr; }
 
--
2.17.1
