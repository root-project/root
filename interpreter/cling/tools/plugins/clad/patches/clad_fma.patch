From 7fd9185c94febbc92c0e6dd90e9efe77c98acb8d Mon Sep 17 00:00:00 2001
From: Garima Singh <garimasingh0028@gmail.com>
Date: Thu, 20 Apr 2023 17:22:50 +0200
Subject: [PATCH] Add std::fma to custom derivatives.

---
 .../clad/Differentiator/BuiltinDerivatives.h  | 21 ++++++++++++
 test/FirstDerivative/BuiltinDerivatives.C     | 12 +++++++
 test/Gradient/Assignments.C                   | 32 ++++++++++++++++++-
 3 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/include/clad/Differentiator/BuiltinDerivatives.h b/include/clad/Differentiator/BuiltinDerivatives.h
index 3c41d89..7e7b04f 100644
--- a/include/clad/Differentiator/BuiltinDerivatives.h
+++ b/include/clad/Differentiator/BuiltinDerivatives.h
@@ -110,6 +110,25 @@ CUDA_HOST_DEVICE void pow_pullback(T1 x, T2 exponent, T3 d_y,
   *d_exponent += t.pushforward * d_y;
 }
 
+template <typename T1, typename T2, typename T3>
+CUDA_HOST_DEVICE ValueAndPushforward<decltype(::std::fma(T1(), T2(), T3())),
+                                     decltype(::std::fma(T1(), T2(), T3()))>
+fma_pushforward(T1 a, T2 b, T3 c, T1 d_a, T2 d_b, T3 d_c) {
+  auto val = ::std::fma(a, b, c);
+  auto derivative = d_a * b + a * d_b + d_c;
+  return {val, derivative};
+}
+
+template <typename T1, typename T2, typename T3, typename T4>
+CUDA_HOST_DEVICE void fma_pullback(T1 a, T2 b, T3 c, T4 d_y,
+                                   clad::array_ref<decltype(T1())> d_a,
+                                   clad::array_ref<decltype(T2())> d_b,
+                                   clad::array_ref<decltype(T3())> d_c) {
+  *d_a += b * d_y;
+  *d_b += a * d_y;
+  *d_c += d_y;
+}
+
 } // namespace std
 // These are required because C variants of mathematical functions are
 // defined in global namespace.
@@ -120,7 +139,9 @@ using std::log_pushforward;
 using std::pow_pushforward;
 using std::sin_pushforward;
 using std::sqrt_pushforward;
+using std::fma_pushforward;
 using std::pow_pullback;
+using std::fma_pullback;
 } // namespace custom_derivatives
 } // namespace clad

diff --git a/test/FirstDerivative/BuiltinDerivatives.C b/test/FirstDerivative/BuiltinDerivatives.C
index bd9eed2..cbf2d28 100644
--- a/test/FirstDerivative/BuiltinDerivatives.C
+++ b/test/FirstDerivative/BuiltinDerivatives.C
@@ -247,6 +247,15 @@ double f11(double x, double y) {
 // CHECK-NEXT:     }
 // CHECK-NEXT: }
 
+double f12(double a, double b) { return std::fma(a, b, b); }
+
+//CHECK: double f12_darg1(double a, double b) {
+//CHECK-NEXT:     double _d_a = 0;
+//CHECK-NEXT:     double _d_b = 1;
+//CHECK-NEXT:     ValueAndPushforward<decltype(::std::fma(double(), double(), double())), decltype(::std::fma(double(), double(), double()))> _t0 = clad::custom_derivatives::fma_pushforward(a, b, b, _d_a, _d_b, _d_b);
+//CHECK-NEXT:     return _t0.pushforward;
+//CHECK-NEXT: }
+
 int main () { //expected-no-diagnostics
   float f_result[2];
   double d_result[2];
@@ -313,5 +322,8 @@ int main () { //expected-no-diagnostics
 
   TEST_GRADIENT(f11, /*numOfDerivativeArgs=*/2, -1, 1, &d_result[0], &d_result[1]); // CHECK-EXEC: {-4.00, 0.00}
 
+  auto f12_darg1 = clad::differentiate(f12, 1);
+  printf("Result is = %f\n", f12_darg1.execute(2, 1)); //CHECK-EXEC: Result is = 3.000000
+
   return 0;
 }
diff --git a/test/Gradient/Assignments.C b/test/Gradient/Assignments.C
index c19cf3c..d62505a 100644
--- a/test/Gradient/Assignments.C
+++ b/test/Gradient/Assignments.C
@@ -1,4 +1,4 @@
-// RUN: %cladclang %s -I%S/../../include -lstdc++ -oReverseAssignments.out 2>&1 | FileCheck %s
+// RUN: %cladclang %s -I%S/../../include -lstdc++ -lm -oReverseAssignments.out 2>&1 | FileCheck %s
 // RUN: ./ReverseAssignments.out | FileCheck -check-prefix=CHECK-EXEC %s
 //CHECK-NOT: {{.*error|warning|note:.*}}
 
@@ -812,6 +812,35 @@ double f18(double i, double j, double k) {
 // CHECK-NEXT:     }
 // CHECK-NEXT: }
 
+double f19(double a, double b) {
+  return std::fma(a, b, b);
+}
+
+//CHECK: void f19_grad(double a, double b, clad::array_ref<double> _d_a, clad::array_ref<double> _d_b) {
+//CHECK-NEXT:     double _t0;
+//CHECK-NEXT:     double _t1;
+//CHECK-NEXT:     double _t2;
+//CHECK-NEXT:     _t0 = a;
+//CHECK-NEXT:     _t1 = b;
+//CHECK-NEXT:     _t2 = b;
+//CHECK-NEXT:     double f19_return = std::fma(_t0, _t1, _t2);
+//CHECK-NEXT:     goto _label0;
+//CHECK-NEXT:   _label0:
+//CHECK-NEXT:     {
+//CHECK-NEXT:         double _grad0 = 0.;
+//CHECK-NEXT:         double _grad1 = 0.;
+//CHECK-NEXT:         double _grad2 = 0.;
+//CHECK-NEXT:         clad::custom_derivatives::fma_pullback(_t0, _t1, _t2, 1, &_grad0, &_grad1, &_grad2);
+//CHECK-NEXT:         double _r0 = _grad0;
+//CHECK-NEXT:         * _d_a += _r0;
+//CHECK-NEXT:         double _r1 = _grad1;
+//CHECK-NEXT:         * _d_b += _r1;
+//CHECK-NEXT:         double _r2 = _grad2;
+//CHECK-NEXT:         * _d_b += _r2;
+//CHECK-NEXT:     }
+//CHECK-NEXT: }
+
+
 #define TEST(F, x, y)                                                          \
   {                                                                            \
     result[0] = 0;                                                             \
@@ -872,4 +901,5 @@ int main() {
   TEST(f16, 3, 4);  // CHECK-EXEC: {16.00, 12.00}
   VAR_TEST(f17, "i", 3, 4, 5, &result[0]);  // CHECK-EXEC: {2.00}
   VAR_TEST(f18, "i, j", 3, 4, 5, &result[0], &result[1]); // CHECK-EXEC: {3.00, 2.00}
+  TEST(f19, 1, 2); // CHECK-EXEC: {2.00, 2.00}
 }
--
2.17.1
