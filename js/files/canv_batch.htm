<!-- file used in batch mode to produce canvas images with headless browser -->
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8">
   <title>Batch production</title>
   <style>
     @media print {
        @page { margin: $page_margin; size: $page_width $page_height; }
     }
  </style>
  <script id="jsroot" src="$jsrootsys/build/jsroot.js"></script>
</head>

<body style="margin:0; padding:0; overflow:hidden">
</body>

<script id="data">
   globalThis.main_objects = $draw_objects;
</script>

<script>

   JSROOT.setBatchMode(true);

   const doms = [], objs = [],
         kinds = $draw_kind,
         widths = $draw_widths,
         heights = $draw_heights,
         keep_as_is = (kinds === 1111) || (kinds === 2222);

   // parse data
   for (let i = 0; i < globalThis.main_objects.length; ++i)
      objs[i] = JSROOT.parse(globalThis.main_objects[i]);

   // create HTML elements for drawings
   for (let i = 0; i < objs.length; ++i) {
      let dom = document.createElement('div');
      dom.style.overflow = 'hidden';
      dom.style.margin = '0';
      dom.style.padding = '0';
      dom.style.width = widths[i] + 'px';
      dom.style.height = heights[i] + 'px';
      if (i > 0)
         dom.style['page-break-before'] = (kinds === 1111) ? 'avoid' : 'always';
      dom.style['page-break-inside'] = 'avoid';
      document.body.append(dom);
      doms.push(dom);
   }

   // remove HTML element with data
   document.getElementById('data').remove();

   // remove JSROOT script itself
   document.getElementById('jsroot').remove();

   let multi_pdf_args = null, multi_pdf_indx;

   async function drawNext(indx) {
      if (indx >= objs.length)
         return true;

      return JSROOT.draw(doms[indx], objs[indx], '').then(painter => {
         if (keep_as_is)
            return drawNext(indx + 1);

         let kind = kinds[indx], last_page_pdf = false;
         if ((kind === 'pdf') && (indx < objs.length - 1) && !kinds[indx + 1]) {
            multi_pdf_args = { as_doc: true };
            multi_pdf_indx = indx;
         } else if (!kind && multi_pdf_args) {
            kind = 'pdf';
            last_page_pdf = (indx === objs.length - 1) || kinds[indx + 1];
         }

         return painter.produceImage(true, kind, multi_pdf_args).then(res => {
            JSROOT.cleanup(doms[indx]);
            doms[indx].removeAttribute('style');
            doms[indx].innerHTML = '';
            if (last_page_pdf) {
               const img = document.createElement('img');
               img.setAttribute('src', multi_pdf_args.doc?.output('dataurlstring'));
               doms[multi_pdf_indx].appendChild(img);
               multi_pdf_args = null;
            } else if (multi_pdf_args) {
               // do nothing, need to add more pages
            } else if (kind === 'svg') {
               doms[indx].innerHTML = res;
            } else {
               const img = document.createElement('img');
               img.setAttribute('src', res);
               doms[indx].appendChild(img);
            }

            return drawNext(indx + 1);
         });
      }).catch(() => {
         // in case happens something wrong
         if (keep_as_is)
            return drawNext(indx + 1);

         // drawing fails - do not try to cleanup
         doms[indx].removeAttribute('style');
         doms[indx].innerHTML = '';

         if (multi_pdf_args) {
            const img = document.createElement('img');
            img.setAttribute('src', 'jsroot;base64,failure');
            doms[multi_pdf_indx].appendChild(img);
            // no need to try other pages - just cancel
            multi_pdf_args = null;
            while ((indx < objs.length) && !kinds[indx + 1])
               indx++;
         } else if (kinds[indx] === 'svg') {
            const elem = document.createElement('svg');
            doms[indx].appendChild(elem);
         } else {
            const img = document.createElement('img');
            img.setAttribute('src', 'jsroot;base64,failure');
            doms[indx].appendChild(img);
         }

         return drawNext(indx + 1);
      });
   }

   drawNext(0).then(() => {
      if (JSROOT.browser.isFirefox && window && (typeof window.dump == "function")) {
         window.dump(document.body.innerHTML);
         window.dump("###batch###job###done###\n");
         window.close();
      }
   });

</script>

</html>
