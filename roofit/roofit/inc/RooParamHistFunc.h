/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ROO_PARAM_HIST_FUNC
#define ROO_PARAM_HIST_FUNC

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooListProxy.h"
#include "RooSetProxy.h"
#include "RooDataHist.h"
#include <list>

class RooParamHistFunc : public RooAbsReal {
public:
  RooParamHistFunc() {} ;
  RooParamHistFunc(const char *name, const char *title, RooDataHist& dh, Bool_t paramRelative=kTRUE);
  RooParamHistFunc(const char *name, const char *title, const RooAbsArg& x, RooDataHist& dh, Bool_t paramRelative=kTRUE);
  RooParamHistFunc(const char *name, const char *title, RooDataHist& dh, const RooParamHistFunc& paramSource, Bool_t paramRelative=kTRUE) ;
  RooParamHistFunc(const RooParamHistFunc& other, const char* name=0) ;
  TObject* clone(const char* newname) const override { return new RooParamHistFunc(*this,newname); }
  inline ~RooParamHistFunc() override { }

  std::list<Double_t>* binBoundaries(RooAbsRealLValue& /*obs*/, Double_t /*xlo*/, Double_t /*xhi*/) const override ;
  std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const override ;
  Bool_t isBinnedDistribution(const RooArgSet&) const override { return kTRUE ; }


  Bool_t forceAnalyticalInt(const RooAbsArg&) const override { return kTRUE ; }
  Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet,const char* rangeName=0) const override ;
  Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName=0) const override ;

  Double_t getActual(Int_t ibin) ;
  void setActual(Int_t ibin, Double_t newVal) ;
  Double_t getNominal(Int_t ibin) const ;
  Double_t getNominalError(Int_t ibin) const ;

  const RooArgList& paramList() const { return _p ; }

 protected:

  friend class RooHistConstraint ;

  RooListProxy  _x ;
  RooListProxy _p ;
  RooDataHist _dh ;
  Bool_t _relParam ;

  Double_t evaluate() const override ;

private:

  ClassDefOverride(RooParamHistFunc,1) // Your description goes here...
};

#endif
